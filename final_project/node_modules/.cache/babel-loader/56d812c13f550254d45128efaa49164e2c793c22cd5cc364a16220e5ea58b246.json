{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __rest } from \"tslib\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport InternalButton from '../button/internal';\nimport { useFormFieldContext } from '../contexts/form-field';\nimport { getBaseProps } from '../internal/base-component/index.js';\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { joinStrings } from '../internal/utils/strings';\nimport styles from './styles.css.js';\nconst InternalFileInput = React.forwardRef((_a, ref) => {\n  var _b;\n  var {\n      accept,\n      ariaRequired,\n      ariaLabel,\n      multiple = false,\n      value,\n      onChange,\n      variant = 'button',\n      children,\n      __internalRootRef = null\n    } = _a,\n    restProps = __rest(_a, [\"accept\", \"ariaRequired\", \"ariaLabel\", \"multiple\", \"value\", \"onChange\", \"variant\", \"children\", \"__internalRootRef\"]);\n  const baseProps = getBaseProps(restProps);\n  const uploadInputRef = useRef(null);\n  const uploadButtonLabelId = useUniqueId('upload-button-label');\n  const formFieldContext = useFormFieldContext(restProps);\n  const selfControlId = useUniqueId('upload-input');\n  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;\n  useForwardFocus(ref, uploadInputRef);\n  const [isFocused, setIsFocused] = useState(false);\n  const onUploadButtonClick = () => {\n    var _a;\n    return (_a = uploadInputRef.current) === null || _a === void 0 ? void 0 : _a.click();\n  };\n  const onUploadInputFocus = () => setIsFocused(true);\n  const onUploadInputBlur = () => setIsFocused(false);\n  const onUploadInputChange = ({\n    target\n  }) => {\n    fireNonCancelableEvent(onChange, {\n      value: target.files ? Array.from(target.files) : []\n    });\n  };\n  checkControlled('FileInput', 'value', value, 'onChange', onChange);\n  const nativeAttributes = {\n    'aria-label': ariaLabel || children,\n    'aria-labelledby': joinStrings(formFieldContext.ariaLabelledby, uploadButtonLabelId),\n    'aria-describedby': formFieldContext.ariaDescribedby\n  };\n  if (formFieldContext.invalid) {\n    nativeAttributes['aria-invalid'] = true;\n  }\n  if (ariaRequired) {\n    nativeAttributes['aria-required'] = true;\n  }\n  if (variant === 'icon' && !ariaLabel) {\n    warnOnce('FileInput', 'Aria label is required with icon variant.');\n  }\n  // Synchronizing component's value with the native file input state.\n  useEffect(() => {\n    /* istanbul ignore next: The DataTransfer is not available in jsdom. */\n    if (window.DataTransfer) {\n      const dataTransfer = new DataTransfer();\n      for (const file of value) {\n        dataTransfer.items.add(file);\n      }\n      uploadInputRef.current.files = dataTransfer.files;\n    }\n    if (uploadInputRef.current) {\n      uploadInputRef.current.value = ''; // reset value to allow calling onChange when the same file is uploaded again\n    }\n  }, [value]);\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    ref: __internalRootRef,\n    className: clsx(baseProps.className, styles.root)\n  }), React.createElement(\"input\", Object.assign({\n    id: controlId,\n    ref: uploadInputRef,\n    type: \"file\",\n    hidden: false,\n    multiple: multiple,\n    accept: accept,\n    onChange: onUploadInputChange,\n    onFocus: onUploadInputFocus,\n    onBlur: onUploadInputBlur,\n    className: clsx(styles['file-input'], styles.hidden)\n  }, nativeAttributes)), React.createElement(InternalButton, {\n    iconName: \"upload\",\n    variant: variant === 'icon' ? 'icon' : undefined,\n    formAction: \"none\",\n    onClick: onUploadButtonClick,\n    className: clsx(styles['file-input-button'], isFocused && styles['force-focus-outline']),\n    __nativeAttributes: {\n      tabIndex: -1,\n      'aria-hidden': true\n    }\n  }, variant === 'button' && children), React.createElement(ScreenreaderOnly, {\n    id: uploadButtonLabelId\n  }, ariaLabel || children));\n});\nexport default InternalFileInput;","map":{"version":3,"names":["React","useEffect","useRef","useState","clsx","warnOnce","InternalButton","useFormFieldContext","getBaseProps","ScreenreaderOnly","fireNonCancelableEvent","checkControlled","useForwardFocus","useUniqueId","joinStrings","styles","InternalFileInput","forwardRef","_a","ref","accept","ariaRequired","ariaLabel","multiple","value","onChange","variant","children","__internalRootRef","restProps","__rest","baseProps","uploadInputRef","uploadButtonLabelId","formFieldContext","selfControlId","controlId","_b","isFocused","setIsFocused","onUploadButtonClick","current","click","onUploadInputFocus","onUploadInputBlur","onUploadInputChange","target","files","Array","from","nativeAttributes","ariaLabelledby","ariaDescribedby","invalid","window","DataTransfer","dataTransfer","file","items","add","createElement","Object","assign","className","root","id","type","hidden","onFocus","onBlur","iconName","undefined","formAction","onClick","__nativeAttributes","tabIndex"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\file-input\\internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { ChangeEvent, Ref, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport InternalButton from '../button/internal';\nimport { useFormFieldContext } from '../contexts/form-field';\nimport { getBaseProps } from '../internal/base-component/index.js';\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component/index.js';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { joinStrings } from '../internal/utils/strings';\nimport { FileInputProps } from './interfaces';\n\nimport styles from './styles.css.js';\n\nconst InternalFileInput = React.forwardRef(\n  (\n    {\n      accept,\n      ariaRequired,\n      ariaLabel,\n      multiple = false,\n      value,\n      onChange,\n      variant = 'button',\n      children,\n      __internalRootRef = null,\n      ...restProps\n    }: FileInputProps & InternalBaseComponentProps,\n    ref: Ref<FileInputProps.Ref>\n  ) => {\n    const baseProps = getBaseProps(restProps);\n    const uploadInputRef = useRef<HTMLInputElement>(null);\n    const uploadButtonLabelId = useUniqueId('upload-button-label');\n    const formFieldContext = useFormFieldContext(restProps);\n    const selfControlId = useUniqueId('upload-input');\n    const controlId = formFieldContext.controlId ?? selfControlId;\n\n    useForwardFocus(ref, uploadInputRef);\n\n    const [isFocused, setIsFocused] = useState(false);\n    const onUploadButtonClick = () => uploadInputRef.current?.click();\n    const onUploadInputFocus = () => setIsFocused(true);\n    const onUploadInputBlur = () => setIsFocused(false);\n\n    const onUploadInputChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\n      fireNonCancelableEvent(onChange, { value: target.files ? Array.from(target.files) : [] });\n    };\n\n    checkControlled('FileInput', 'value', value, 'onChange', onChange);\n\n    const nativeAttributes: React.HTMLAttributes<HTMLInputElement> = {\n      'aria-label': ariaLabel || children,\n      'aria-labelledby': joinStrings(formFieldContext.ariaLabelledby, uploadButtonLabelId),\n      'aria-describedby': formFieldContext.ariaDescribedby,\n    };\n    if (formFieldContext.invalid) {\n      nativeAttributes['aria-invalid'] = true;\n    }\n    if (ariaRequired) {\n      nativeAttributes['aria-required'] = true;\n    }\n\n    if (variant === 'icon' && !ariaLabel) {\n      warnOnce('FileInput', 'Aria label is required with icon variant.');\n    }\n\n    // Synchronizing component's value with the native file input state.\n    useEffect(() => {\n      /* istanbul ignore next: The DataTransfer is not available in jsdom. */\n      if (window.DataTransfer) {\n        const dataTransfer = new DataTransfer();\n        for (const file of value) {\n          dataTransfer.items.add(file);\n        }\n        uploadInputRef.current!.files = dataTransfer.files;\n      }\n      if (uploadInputRef.current) {\n        uploadInputRef.current.value = ''; // reset value to allow calling onChange when the same file is uploaded again\n      }\n    }, [value]);\n\n    return (\n      <div {...baseProps} ref={__internalRootRef} className={clsx(baseProps.className, styles.root)}>\n        {/* This is the actual interactive and accessible file-upload element. */}\n        {/* It is visually hidden to achieve the desired UX design. */}\n        <input\n          id={controlId}\n          ref={uploadInputRef}\n          type=\"file\"\n          hidden={false}\n          multiple={multiple}\n          accept={accept}\n          onChange={onUploadInputChange}\n          onFocus={onUploadInputFocus}\n          onBlur={onUploadInputBlur}\n          className={clsx(styles['file-input'], styles.hidden)}\n          {...nativeAttributes}\n        />\n\n        {/* The button is decorative. It dispatches clicks to the file input and is ARIA-hidden. */}\n        {/* When the input is focused the focus outline is forced on the button. */}\n        <InternalButton\n          iconName=\"upload\"\n          variant={variant === 'icon' ? 'icon' : undefined}\n          formAction=\"none\"\n          onClick={onUploadButtonClick}\n          className={clsx(styles['file-input-button'], isFocused && styles['force-focus-outline'])}\n          __nativeAttributes={{ tabIndex: -1, 'aria-hidden': true }}\n        >\n          {variant === 'button' && children}\n        </InternalButton>\n\n        {/* The file input needs to be labelled with provided content. Can't use the button because it is ARIA-hidden. */}\n        <ScreenreaderOnly id={uploadButtonLabelId}>{ariaLabel || children}</ScreenreaderOnly>\n      </div>\n    );\n  }\n);\n\nexport default InternalFileInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}