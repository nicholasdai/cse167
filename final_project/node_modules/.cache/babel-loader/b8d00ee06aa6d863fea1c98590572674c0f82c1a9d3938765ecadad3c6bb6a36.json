{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useImperativeHandle, useState } from 'react';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { useIntersectionObserver } from '../../internal/hooks/use-intersection-observer';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useGetGlobalBreadcrumbs } from '../../internal/plugins/helpers/use-global-breadcrumbs';\nimport globalVars from '../../internal/styles/global-vars';\nimport { getSplitPanelDefaultSize } from '../../split-panel/utils/size-utils';\nimport { MIN_DRAWER_SIZE, useDrawers } from '../utils/use-drawers';\nimport { useFocusControl, useMultipleFocusControl } from '../utils/use-focus-control';\nimport { useSplitPanelFocusControl } from '../utils/use-split-panel-focus-control';\nimport { ActiveDrawersContext } from '../utils/visibility-context';\nimport { computeHorizontalLayout, computeVerticalLayout, CONTENT_PADDING } from './compute-layout';\nimport { AppLayoutDrawer, AppLayoutGlobalDrawers, AppLayoutNavigation, AppLayoutNotifications, AppLayoutSplitPanelBottom, AppLayoutSplitPanelSide, AppLayoutToolbar } from './internal';\nimport { useMultiAppLayout } from './multi-layout';\nimport { SkeletonLayout } from './skeleton';\nconst AppLayoutVisualRefreshToolbar = React.forwardRef((_a, forwardRef) => {\n  var _b, _c;\n  var {\n      ariaLabels,\n      contentHeader,\n      content,\n      navigationOpen,\n      navigationWidth,\n      navigation,\n      navigationHide,\n      onNavigationChange,\n      tools,\n      toolsOpen: controlledToolsOpen,\n      onToolsChange,\n      toolsHide,\n      toolsWidth,\n      contentType,\n      headerVariant,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      onSplitPanelToggle,\n      onSplitPanelResize,\n      onSplitPanelPreferencesChange,\n      disableContentPaddings,\n      minContentWidth,\n      maxContentWidth,\n      placement\n    } = _a,\n    rest = __rest(_a, [\"ariaLabels\", \"contentHeader\", \"content\", \"navigationOpen\", \"navigationWidth\", \"navigation\", \"navigationHide\", \"onNavigationChange\", \"tools\", \"toolsOpen\", \"onToolsChange\", \"toolsHide\", \"toolsWidth\", \"contentType\", \"headerVariant\", \"breadcrumbs\", \"notifications\", \"stickyNotifications\", \"splitPanelPreferences\", \"splitPanelOpen\", \"splitPanel\", \"splitPanelSize\", \"onSplitPanelToggle\", \"onSplitPanelResize\", \"onSplitPanelPreferencesChange\", \"disableContentPaddings\", \"minContentWidth\", \"maxContentWidth\", \"placement\"]);\n  const isMobile = useMobile();\n  const {\n    __embeddedViewMode: embeddedViewMode,\n    __forceDeduplicationType: forceDeduplicationType\n  } = rest;\n  const splitPanelControlId = useUniqueId('split-panel');\n  const [toolbarState, setToolbarState] = useState('show');\n  const [toolbarHeight, setToolbarHeight] = useState(0);\n  const [notificationsHeight, setNotificationsHeight] = useState(0);\n  const [navigationAnimationDisabled, setNavigationAnimationDisabled] = useState(true);\n  const [splitPanelAnimationDisabled, setSplitPanelAnimationDisabled] = useState(true);\n  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'toolsOpen',\n    changeHandler: 'onToolsChange'\n  });\n  const onToolsToggle = open => {\n    setToolsOpen(open);\n    drawersFocusControl.setFocus();\n    fireNonCancelableEvent(onToolsChange, {\n      open\n    });\n  };\n  const onGlobalDrawerFocus = (drawerId, open) => {\n    globalDrawersFocusControl.setFocus({\n      force: true,\n      drawerId,\n      open\n    });\n  };\n  const onAddNewActiveDrawer = drawerId => {\n    var _a, _b;\n    // If a local drawer is already open, and we attempt to open a new one,\n    // it will replace the existing one instead of opening an additional drawer,\n    // since only one local drawer is supported. Therefore, layout calculations are not necessary.\n    if (activeDrawer && (drawers === null || drawers === void 0 ? void 0 : drawers.find(drawer => drawer.id === drawerId))) {\n      return;\n    }\n    // get the size of drawerId. it could be either local or global drawer\n    const combinedDrawers = [...(drawers || []), ...globalDrawers];\n    const newDrawer = combinedDrawers.find(drawer => drawer.id === drawerId);\n    if (!newDrawer) {\n      return;\n    }\n    const newDrawerSize = Math.min((_b = (_a = newDrawer.defaultSize) !== null && _a !== void 0 ? _a : drawerSizes[drawerId]) !== null && _b !== void 0 ? _b : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n    //   check if the active drawers could be resized to fit the new drawers\n    //   to do this, we need to take all active drawers, sum up their min sizes, truncate it from resizableSpaceAvailable\n    //   and compare a given number with the new drawer id min size\n    // the total size of all global drawers resized to their min size\n    const availableSpaceForNewDrawer = resizableSpaceAvailable - totalActiveDrawersMinSize;\n    if (availableSpaceForNewDrawer >= newDrawerSize) {\n      return;\n    }\n    // now we made sure we cannot accommodate the new drawer with existing ones\n    closeFirstDrawer();\n  };\n  const {\n    drawers,\n    activeDrawer,\n    minDrawerSize,\n    minGlobalDrawersSizes,\n    activeDrawerSize,\n    ariaLabelsWithDrawers,\n    globalDrawers,\n    activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    drawerSizes,\n    drawersOpenQueue,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n    onActiveGlobalDrawersChange\n  } = useDrawers(Object.assign(Object.assign({}, rest), {\n    onGlobalDrawerFocus,\n    onAddNewActiveDrawer\n  }), ariaLabels, {\n    ariaLabels,\n    toolsHide,\n    toolsOpen,\n    tools,\n    toolsWidth,\n    onToolsToggle\n  });\n  const onActiveDrawerChangeHandler = (drawerId, params = {\n    initiatedByUserAction: true\n  }) => {\n    onActiveDrawerChange(drawerId, params);\n    drawersFocusControl.setFocus();\n  };\n  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelOpen',\n    changeHandler: 'onSplitPanelToggle'\n  });\n  const onSplitPanelToggleHandler = () => {\n    setSplitPanelAnimationDisabled(false);\n    setSplitPanelOpen(!splitPanelOpen);\n    splitPanelFocusControl.setLastInteraction({\n      type: splitPanelOpen ? 'close' : 'open'\n    });\n    fireNonCancelableEvent(onSplitPanelToggle, {\n      open: !splitPanelOpen\n    });\n  };\n  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, undefined, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelPreferences',\n    changeHandler: 'onSplitPanelPreferencesChange'\n  });\n  const onSplitPanelPreferencesChangeHandler = detail => {\n    setSplitPanelPreferences(detail);\n    splitPanelFocusControl.setLastInteraction({\n      type: 'position'\n    });\n    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n  };\n  const [splitPanelSize = 0, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, getSplitPanelDefaultSize((_b = splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== null && _b !== void 0 ? _b : 'bottom'), {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelSize',\n    changeHandler: 'onSplitPanelResize'\n  });\n  const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n  const onSplitPanelResizeHandler = size => {\n    setSplitPanelSize(size);\n    fireNonCancelableEvent(onSplitPanelResize, {\n      size\n    });\n  };\n  const [splitPanelToggleConfig, setSplitPanelToggleConfig] = useState({\n    ariaLabel: undefined,\n    displayed: false\n  });\n  const globalDrawersFocusControl = useMultipleFocusControl(true, activeGlobalDrawersIds);\n  const drawersFocusControl = useFocusControl(!!(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id), true, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id);\n  const navigationFocusControl = useFocusControl(navigationOpen);\n  const splitPanelFocusControl = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);\n  const onNavigationToggle = useStableCallback(open => {\n    setNavigationAnimationDisabled(false);\n    navigationFocusControl.setFocus();\n    fireNonCancelableEvent(onNavigationChange, {\n      open\n    });\n  });\n  useImperativeHandle(forwardRef, () => ({\n    closeNavigationIfNecessary: () => isMobile && onNavigationToggle(false),\n    openTools: () => onToolsToggle(true),\n    focusToolsClose: () => drawersFocusControl.setFocus(true),\n    focusActiveDrawer: () => drawersFocusControl.setFocus(true),\n    focusSplitPanel: () => {\n      var _a;\n      return (_a = splitPanelFocusControl.refs.slider.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }));\n  const resolvedStickyNotifications = !!stickyNotifications && !isMobile;\n  //navigation must be null if hidden so toolbar knows to hide the toggle button\n  const resolvedNavigation = navigationHide ? null : navigation || React.createElement(React.Fragment, null);\n  //navigation must not be open if navigationHide is true\n  const resolvedNavigationOpen = !!resolvedNavigation && navigationOpen;\n  const {\n    maxDrawerSize,\n    maxSplitPanelSize,\n    splitPanelForcedPosition,\n    splitPanelPosition,\n    maxGlobalDrawersSizes,\n    resizableSpaceAvailable\n  } = computeHorizontalLayout({\n    activeDrawerSize: activeDrawer ? activeDrawerSize : 0,\n    splitPanelSize,\n    minContentWidth,\n    navigationOpen: resolvedNavigationOpen,\n    navigationWidth,\n    placement,\n    splitPanelOpen,\n    splitPanelPosition: splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position,\n    isMobile,\n    activeGlobalDrawersSizes\n  });\n  const {\n    ref: intersectionObserverRef,\n    isIntersecting\n  } = useIntersectionObserver({\n    initialState: true\n  });\n  const {\n    registered,\n    toolbarProps\n  } = useMultiAppLayout({\n    forceDeduplicationType,\n    ariaLabels: ariaLabelsWithDrawers,\n    navigation: resolvedNavigation,\n    navigationOpen: resolvedNavigationOpen,\n    onNavigationToggle,\n    navigationFocusRef: navigationFocusControl.refs.toggle,\n    breadcrumbs,\n    activeDrawerId: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _c !== void 0 ? _c : null,\n    // only pass it down if there are non-empty drawers or tools\n    drawers: (drawers === null || drawers === void 0 ? void 0 : drawers.length) || !toolsHide ? drawers : undefined,\n    globalDrawersFocusControl,\n    globalDrawers: (globalDrawers === null || globalDrawers === void 0 ? void 0 : globalDrawers.length) ? globalDrawers : undefined,\n    activeGlobalDrawersIds,\n    onActiveGlobalDrawersChange,\n    onActiveDrawerChange: onActiveDrawerChangeHandler,\n    drawersFocusRef: drawersFocusControl.refs.toggle,\n    splitPanel,\n    splitPanelToggleProps: Object.assign(Object.assign({}, splitPanelToggleConfig), {\n      active: splitPanelOpen,\n      controlId: splitPanelControlId,\n      position: splitPanelPosition\n    }),\n    splitPanelFocusRef: splitPanelFocusControl.refs.toggle,\n    onSplitPanelToggle: onSplitPanelToggleHandler\n  }, isIntersecting);\n  const hasToolbar = !embeddedViewMode && !!toolbarProps;\n  const discoveredBreadcrumbs = useGetGlobalBreadcrumbs(hasToolbar && !breadcrumbs);\n  const verticalOffsets = computeVerticalLayout({\n    topOffset: placement.insetBlockStart,\n    hasVisibleToolbar: hasToolbar && toolbarState !== 'hide',\n    notificationsHeight: notificationsHeight !== null && notificationsHeight !== void 0 ? notificationsHeight : 0,\n    toolbarHeight: toolbarHeight !== null && toolbarHeight !== void 0 ? toolbarHeight : 0,\n    stickyNotifications: resolvedStickyNotifications\n  });\n  const appLayoutInternals = {\n    ariaLabels: ariaLabelsWithDrawers,\n    headerVariant,\n    isMobile,\n    breadcrumbs,\n    discoveredBreadcrumbs,\n    stickyNotifications: resolvedStickyNotifications,\n    navigationOpen: resolvedNavigationOpen,\n    navigation: resolvedNavigation,\n    navigationFocusControl,\n    activeDrawer,\n    activeDrawerSize,\n    minDrawerSize,\n    maxDrawerSize,\n    minGlobalDrawersSizes,\n    maxGlobalDrawersSizes,\n    drawers: drawers,\n    globalDrawers,\n    activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    onActiveGlobalDrawersChange,\n    drawersFocusControl,\n    globalDrawersFocusControl,\n    splitPanelPosition,\n    splitPanelToggleConfig,\n    splitPanelOpen,\n    splitPanelControlId,\n    splitPanelFocusControl,\n    placement,\n    toolbarState,\n    setToolbarState,\n    verticalOffsets,\n    drawersOpenQueue,\n    setToolbarHeight,\n    setNotificationsHeight,\n    onSplitPanelToggle: onSplitPanelToggleHandler,\n    onNavigationToggle,\n    onActiveDrawerChange: onActiveDrawerChangeHandler,\n    onActiveDrawerResize,\n    splitPanelAnimationDisabled\n  };\n  const splitPanelInternals = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    maxWidth: maxSplitPanelSize,\n    isForcedPosition: splitPanelForcedPosition,\n    isOpen: splitPanelOpen,\n    leftOffset: 0,\n    onPreferencesChange: onSplitPanelPreferencesChangeHandler,\n    onResize: onSplitPanelResizeHandler,\n    onToggle: onSplitPanelToggleHandler,\n    position: splitPanelPosition,\n    reportSize: size => setSplitPanelReportedSize(size),\n    reportHeaderHeight: () => {\n      /*unused in this design*/\n    },\n    rightOffset: 0,\n    size: splitPanelSize,\n    topOffset: 0,\n    setSplitPanelToggle: setSplitPanelToggleConfig,\n    refs: splitPanelFocusControl.refs\n  };\n  const closeFirstDrawer = useStableCallback(() => {\n    const drawerToClose = drawersOpenQueue[drawersOpenQueue.length - 1];\n    if (activeDrawer && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) === drawerToClose) {\n      onActiveDrawerChange(null, {\n        initiatedByUserAction: true\n      });\n    } else if (activeGlobalDrawersIds.includes(drawerToClose)) {\n      onActiveGlobalDrawersChange(drawerToClose, {\n        initiatedByUserAction: true\n      });\n    }\n  });\n  useEffect(() => {\n    // Close navigation drawer on mobile so that the main content is visible\n    if (isMobile) {\n      onNavigationToggle(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isMobile]);\n  const getTotalActiveDrawersMinSize = () => {\n    var _a;\n    const combinedDrawers = [...(drawers || []), ...globalDrawers];\n    let result = activeGlobalDrawersIds.map(activeDrawerId => {\n      var _a, _b;\n      return Math.min((_b = (_a = combinedDrawers.find(drawer => drawer.id === activeDrawerId)) === null || _a === void 0 ? void 0 : _a.defaultSize) !== null && _b !== void 0 ? _b : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n    }).reduce((acc, curr) => acc + curr, 0);\n    if (activeDrawer) {\n      result += Math.min((_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _a !== void 0 ? _a : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n    }\n    return result;\n  };\n  const totalActiveDrawersMinSize = getTotalActiveDrawersMinSize();\n  useEffect(() => {\n    if (isMobile) {\n      return;\n    }\n    const activeNavigationWidth = !navigationHide && navigationOpen ? navigationWidth : 0;\n    const scrollWidth = activeNavigationWidth + CONTENT_PADDING + totalActiveDrawersMinSize;\n    const hasHorizontalScroll = scrollWidth > placement.inlineSize;\n    if (hasHorizontalScroll) {\n      if (!navigationHide && navigationOpen) {\n        onNavigationToggle(false);\n        return;\n      }\n      closeFirstDrawer();\n    }\n  }, [totalActiveDrawersMinSize, closeFirstDrawer, isMobile, navigationHide, navigationOpen, navigationWidth, onNavigationToggle, placement.inlineSize]);\n  return React.createElement(React.Fragment, null, !hasToolbar && breadcrumbs ? React.createElement(ScreenreaderOnly, null, breadcrumbs) : null, React.createElement(SkeletonLayout, {\n    ref: intersectionObserverRef,\n    style: Object.assign({\n      [globalVars.stickyVerticalTopOffset]: `${verticalOffsets.header}px`,\n      [globalVars.stickyVerticalBottomOffset]: `${placement.insetBlockEnd}px`,\n      paddingBlockEnd: splitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : ''\n    }, !isMobile ? {\n      minWidth: `${minContentWidth}px`\n    } : {}),\n    toolbar: hasToolbar && React.createElement(AppLayoutToolbar, {\n      appLayoutInternals: appLayoutInternals,\n      toolbarProps: toolbarProps\n    }),\n    notifications: notifications && React.createElement(AppLayoutNotifications, {\n      appLayoutInternals: appLayoutInternals\n    }, notifications),\n    headerVariant: headerVariant,\n    contentHeader: contentHeader,\n    // delay rendering the content until registration of this instance is complete\n    content: registered ? content : null,\n    navigation: resolvedNavigation && React.createElement(AppLayoutNavigation, {\n      appLayoutInternals: appLayoutInternals\n    }),\n    navigationOpen: resolvedNavigationOpen,\n    navigationWidth: navigationWidth,\n    navigationAnimationDisabled: navigationAnimationDisabled,\n    tools: drawers && drawers.length > 0 && React.createElement(AppLayoutDrawer, {\n      appLayoutInternals: appLayoutInternals\n    }),\n    globalTools: React.createElement(ActiveDrawersContext.Provider, {\n      value: activeGlobalDrawersIds\n    }, React.createElement(AppLayoutGlobalDrawers, {\n      appLayoutInternals: appLayoutInternals\n    })),\n    globalToolsOpen: !!activeGlobalDrawersIds.length,\n    toolsOpen: !!activeDrawer,\n    toolsWidth: activeDrawerSize,\n    sideSplitPanel: splitPanelPosition === 'side' && React.createElement(AppLayoutSplitPanelSide, {\n      appLayoutInternals: appLayoutInternals,\n      splitPanelInternals: splitPanelInternals\n    }, splitPanel),\n    bottomSplitPanel: splitPanelPosition === 'bottom' && React.createElement(AppLayoutSplitPanelBottom, {\n      appLayoutInternals: appLayoutInternals,\n      splitPanelInternals: splitPanelInternals\n    }, splitPanel),\n    splitPanelOpen: splitPanelOpen,\n    placement: placement,\n    contentType: contentType,\n    maxContentWidth: maxContentWidth,\n    disableContentPaddings: disableContentPaddings\n  }));\n});\nexport default AppLayoutVisualRefreshToolbar;","map":{"version":3,"names":["React","useEffect","useImperativeHandle","useState","useStableCallback","ScreenreaderOnly","fireNonCancelableEvent","useControllable","useIntersectionObserver","useMobile","useUniqueId","useGetGlobalBreadcrumbs","globalVars","getSplitPanelDefaultSize","MIN_DRAWER_SIZE","useDrawers","useFocusControl","useMultipleFocusControl","useSplitPanelFocusControl","ActiveDrawersContext","computeHorizontalLayout","computeVerticalLayout","CONTENT_PADDING","AppLayoutDrawer","AppLayoutGlobalDrawers","AppLayoutNavigation","AppLayoutNotifications","AppLayoutSplitPanelBottom","AppLayoutSplitPanelSide","AppLayoutToolbar","useMultiAppLayout","SkeletonLayout","AppLayoutVisualRefreshToolbar","forwardRef","_a","ariaLabels","contentHeader","content","navigationOpen","navigationWidth","navigation","navigationHide","onNavigationChange","tools","toolsOpen","controlledToolsOpen","onToolsChange","toolsHide","toolsWidth","contentType","headerVariant","breadcrumbs","notifications","stickyNotifications","splitPanelPreferences","controlledSplitPanelPreferences","splitPanelOpen","controlledSplitPanelOpen","splitPanel","splitPanelSize","controlledSplitPanelSize","onSplitPanelToggle","onSplitPanelResize","onSplitPanelPreferencesChange","disableContentPaddings","minContentWidth","maxContentWidth","placement","rest","__rest","isMobile","__embeddedViewMode","embeddedViewMode","__forceDeduplicationType","forceDeduplicationType","splitPanelControlId","toolbarState","setToolbarState","toolbarHeight","setToolbarHeight","notificationsHeight","setNotificationsHeight","navigationAnimationDisabled","setNavigationAnimationDisabled","splitPanelAnimationDisabled","setSplitPanelAnimationDisabled","setToolsOpen","componentName","controlledProp","changeHandler","onToolsToggle","open","drawersFocusControl","setFocus","onGlobalDrawerFocus","drawerId","globalDrawersFocusControl","force","onAddNewActiveDrawer","activeDrawer","drawers","find","drawer","id","combinedDrawers","globalDrawers","newDrawer","newDrawerSize","Math","min","_b","defaultSize","drawerSizes","availableSpaceForNewDrawer","resizableSpaceAvailable","totalActiveDrawersMinSize","closeFirstDrawer","minDrawerSize","minGlobalDrawersSizes","activeDrawerSize","ariaLabelsWithDrawers","activeGlobalDrawers","activeGlobalDrawersIds","activeGlobalDrawersSizes","drawersOpenQueue","onActiveDrawerChange","onActiveDrawerResize","onActiveGlobalDrawersChange","Object","assign","onActiveDrawerChangeHandler","params","initiatedByUserAction","setSplitPanelOpen","onSplitPanelToggleHandler","splitPanelFocusControl","setLastInteraction","type","setSplitPanelPreferences","undefined","onSplitPanelPreferencesChangeHandler","detail","setSplitPanelSize","position","splitPanelReportedSize","setSplitPanelReportedSize","onSplitPanelResizeHandler","size","splitPanelToggleConfig","setSplitPanelToggleConfig","ariaLabel","displayed","navigationFocusControl","onNavigationToggle","closeNavigationIfNecessary","openTools","focusToolsClose","focusActiveDrawer","focusSplitPanel","refs","slider","current","focus","resolvedStickyNotifications","resolvedNavigation","createElement","Fragment","resolvedNavigationOpen","maxDrawerSize","maxSplitPanelSize","splitPanelForcedPosition","splitPanelPosition","maxGlobalDrawersSizes","ref","intersectionObserverRef","isIntersecting","initialState","registered","toolbarProps","navigationFocusRef","toggle","activeDrawerId","_c","length","drawersFocusRef","splitPanelToggleProps","active","controlId","splitPanelFocusRef","hasToolbar","discoveredBreadcrumbs","verticalOffsets","topOffset","insetBlockStart","hasVisibleToolbar","appLayoutInternals","splitPanelInternals","bottomOffset","getMaxHeight","availableHeight","document","documentElement","clientHeight","insetBlockEnd","maxWidth","isForcedPosition","isOpen","leftOffset","onPreferencesChange","onResize","onToggle","reportSize","reportHeaderHeight","rightOffset","setSplitPanelToggle","drawerToClose","includes","getTotalActiveDrawersMinSize","result","map","reduce","acc","curr","activeNavigationWidth","scrollWidth","hasHorizontalScroll","inlineSize","style","stickyVerticalTopOffset","header","stickyVerticalBottomOffset","paddingBlockEnd","minWidth","toolbar","globalTools","Provider","value","globalToolsOpen","sideSplitPanel","bottomSplitPanel"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\app-layout\\visual-refresh-toolbar\\index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useImperativeHandle, useState } from 'react';\n\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\n\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { SplitPanelSideToggleProps } from '../../internal/context/split-panel-context';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { useIntersectionObserver } from '../../internal/hooks/use-intersection-observer';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useGetGlobalBreadcrumbs } from '../../internal/plugins/helpers/use-global-breadcrumbs';\nimport globalVars from '../../internal/styles/global-vars';\nimport { getSplitPanelDefaultSize } from '../../split-panel/utils/size-utils';\nimport { AppLayoutProps, AppLayoutPropsWithDefaults } from '../interfaces';\nimport { SplitPanelProviderProps } from '../split-panel';\nimport { MIN_DRAWER_SIZE, OnChangeParams, useDrawers } from '../utils/use-drawers';\nimport { useFocusControl, useMultipleFocusControl } from '../utils/use-focus-control';\nimport { useSplitPanelFocusControl } from '../utils/use-split-panel-focus-control';\nimport { ActiveDrawersContext } from '../utils/visibility-context';\nimport { computeHorizontalLayout, computeVerticalLayout, CONTENT_PADDING } from './compute-layout';\nimport { AppLayoutInternals } from './interfaces';\nimport {\n  AppLayoutDrawer,\n  AppLayoutGlobalDrawers,\n  AppLayoutNavigation,\n  AppLayoutNotifications,\n  AppLayoutSplitPanelBottom,\n  AppLayoutSplitPanelSide,\n  AppLayoutToolbar,\n} from './internal';\nimport { useMultiAppLayout } from './multi-layout';\nimport { SkeletonLayout } from './skeleton';\n\nconst AppLayoutVisualRefreshToolbar = React.forwardRef<AppLayoutProps.Ref, AppLayoutPropsWithDefaults>(\n  (\n    {\n      ariaLabels,\n      contentHeader,\n      content,\n      navigationOpen,\n      navigationWidth,\n      navigation,\n      navigationHide,\n      onNavigationChange,\n      tools,\n      toolsOpen: controlledToolsOpen,\n      onToolsChange,\n      toolsHide,\n      toolsWidth,\n      contentType,\n      headerVariant,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      onSplitPanelToggle,\n      onSplitPanelResize,\n      onSplitPanelPreferencesChange,\n      disableContentPaddings,\n      minContentWidth,\n      maxContentWidth,\n      placement,\n      ...rest\n    },\n    forwardRef\n  ) => {\n    const isMobile = useMobile();\n    const { __embeddedViewMode: embeddedViewMode, __forceDeduplicationType: forceDeduplicationType } = rest as any;\n    const splitPanelControlId = useUniqueId('split-panel');\n    const [toolbarState, setToolbarState] = useState<'show' | 'hide'>('show');\n    const [toolbarHeight, setToolbarHeight] = useState(0);\n    const [notificationsHeight, setNotificationsHeight] = useState(0);\n    const [navigationAnimationDisabled, setNavigationAnimationDisabled] = useState(true);\n    const [splitPanelAnimationDisabled, setSplitPanelAnimationDisabled] = useState(true);\n\n    const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {\n      componentName: 'AppLayout',\n      controlledProp: 'toolsOpen',\n      changeHandler: 'onToolsChange',\n    });\n    const onToolsToggle = (open: boolean) => {\n      setToolsOpen(open);\n      drawersFocusControl.setFocus();\n      fireNonCancelableEvent(onToolsChange, { open });\n    };\n\n    const onGlobalDrawerFocus = (drawerId: string, open: boolean) => {\n      globalDrawersFocusControl.setFocus({ force: true, drawerId, open });\n    };\n\n    const onAddNewActiveDrawer = (drawerId: string) => {\n      // If a local drawer is already open, and we attempt to open a new one,\n      // it will replace the existing one instead of opening an additional drawer,\n      // since only one local drawer is supported. Therefore, layout calculations are not necessary.\n      if (activeDrawer && drawers?.find(drawer => drawer.id === drawerId)) {\n        return;\n      }\n      // get the size of drawerId. it could be either local or global drawer\n      const combinedDrawers = [...(drawers || []), ...globalDrawers];\n      const newDrawer = combinedDrawers.find(drawer => drawer.id === drawerId);\n      if (!newDrawer) {\n        return;\n      }\n      const newDrawerSize = Math.min(\n        newDrawer.defaultSize ?? drawerSizes[drawerId] ?? MIN_DRAWER_SIZE,\n        MIN_DRAWER_SIZE\n      );\n      //   check if the active drawers could be resized to fit the new drawers\n      //   to do this, we need to take all active drawers, sum up their min sizes, truncate it from resizableSpaceAvailable\n      //   and compare a given number with the new drawer id min size\n\n      // the total size of all global drawers resized to their min size\n      const availableSpaceForNewDrawer = resizableSpaceAvailable - totalActiveDrawersMinSize;\n      if (availableSpaceForNewDrawer >= newDrawerSize) {\n        return;\n      }\n\n      // now we made sure we cannot accommodate the new drawer with existing ones\n      closeFirstDrawer();\n    };\n\n    const {\n      drawers,\n      activeDrawer,\n      minDrawerSize,\n      minGlobalDrawersSizes,\n      activeDrawerSize,\n      ariaLabelsWithDrawers,\n      globalDrawers,\n      activeGlobalDrawers,\n      activeGlobalDrawersIds,\n      activeGlobalDrawersSizes,\n      drawerSizes,\n      drawersOpenQueue,\n      onActiveDrawerChange,\n      onActiveDrawerResize,\n      onActiveGlobalDrawersChange,\n    } = useDrawers({ ...rest, onGlobalDrawerFocus, onAddNewActiveDrawer }, ariaLabels, {\n      ariaLabels,\n      toolsHide,\n      toolsOpen,\n      tools,\n      toolsWidth,\n      onToolsToggle,\n    });\n\n    const onActiveDrawerChangeHandler = (\n      drawerId: string | null,\n      params: OnChangeParams = { initiatedByUserAction: true }\n    ) => {\n      onActiveDrawerChange(drawerId, params);\n      drawersFocusControl.setFocus();\n    };\n\n    const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(\n      controlledSplitPanelOpen,\n      onSplitPanelToggle,\n      false,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelOpen',\n        changeHandler: 'onSplitPanelToggle',\n      }\n    );\n\n    const onSplitPanelToggleHandler = () => {\n      setSplitPanelAnimationDisabled(false);\n      setSplitPanelOpen(!splitPanelOpen);\n      splitPanelFocusControl.setLastInteraction({ type: splitPanelOpen ? 'close' : 'open' });\n      fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });\n    };\n\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n\n    const onSplitPanelPreferencesChangeHandler = (detail: AppLayoutProps.SplitPanelPreferences) => {\n      setSplitPanelPreferences(detail);\n      splitPanelFocusControl.setLastInteraction({ type: 'position' });\n      fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n    };\n\n    const [splitPanelSize = 0, setSplitPanelSize] = useControllable(\n      controlledSplitPanelSize,\n      onSplitPanelResize,\n      getSplitPanelDefaultSize(splitPanelPreferences?.position ?? 'bottom'),\n      { componentName: 'AppLayout', controlledProp: 'splitPanelSize', changeHandler: 'onSplitPanelResize' }\n    );\n\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n\n    const onSplitPanelResizeHandler = (size: number) => {\n      setSplitPanelSize(size);\n      fireNonCancelableEvent(onSplitPanelResize, { size });\n    };\n\n    const [splitPanelToggleConfig, setSplitPanelToggleConfig] = useState<SplitPanelSideToggleProps>({\n      ariaLabel: undefined,\n      displayed: false,\n    });\n\n    const globalDrawersFocusControl = useMultipleFocusControl(true, activeGlobalDrawersIds);\n    const drawersFocusControl = useFocusControl(!!activeDrawer?.id, true, activeDrawer?.id);\n    const navigationFocusControl = useFocusControl(navigationOpen);\n    const splitPanelFocusControl = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);\n\n    const onNavigationToggle = useStableCallback((open: boolean) => {\n      setNavigationAnimationDisabled(false);\n      navigationFocusControl.setFocus();\n      fireNonCancelableEvent(onNavigationChange, { open });\n    });\n\n    useImperativeHandle(forwardRef, () => ({\n      closeNavigationIfNecessary: () => isMobile && onNavigationToggle(false),\n      openTools: () => onToolsToggle(true),\n      focusToolsClose: () => drawersFocusControl.setFocus(true),\n      focusActiveDrawer: () => drawersFocusControl.setFocus(true),\n      focusSplitPanel: () => splitPanelFocusControl.refs.slider.current?.focus(),\n    }));\n\n    const resolvedStickyNotifications = !!stickyNotifications && !isMobile;\n    //navigation must be null if hidden so toolbar knows to hide the toggle button\n    const resolvedNavigation = navigationHide ? null : navigation || <></>;\n    //navigation must not be open if navigationHide is true\n    const resolvedNavigationOpen = !!resolvedNavigation && navigationOpen;\n    const {\n      maxDrawerSize,\n      maxSplitPanelSize,\n      splitPanelForcedPosition,\n      splitPanelPosition,\n      maxGlobalDrawersSizes,\n      resizableSpaceAvailable,\n    } = computeHorizontalLayout({\n      activeDrawerSize: activeDrawer ? activeDrawerSize : 0,\n      splitPanelSize,\n      minContentWidth,\n      navigationOpen: resolvedNavigationOpen,\n      navigationWidth,\n      placement,\n      splitPanelOpen,\n      splitPanelPosition: splitPanelPreferences?.position,\n      isMobile,\n      activeGlobalDrawersSizes,\n    });\n\n    const { ref: intersectionObserverRef, isIntersecting } = useIntersectionObserver({ initialState: true });\n    const { registered, toolbarProps } = useMultiAppLayout(\n      {\n        forceDeduplicationType,\n        ariaLabels: ariaLabelsWithDrawers,\n        navigation: resolvedNavigation,\n        navigationOpen: resolvedNavigationOpen,\n        onNavigationToggle,\n        navigationFocusRef: navigationFocusControl.refs.toggle,\n        breadcrumbs,\n        activeDrawerId: activeDrawer?.id ?? null,\n        // only pass it down if there are non-empty drawers or tools\n        drawers: drawers?.length || !toolsHide ? drawers : undefined,\n        globalDrawersFocusControl,\n        globalDrawers: globalDrawers?.length ? globalDrawers : undefined,\n        activeGlobalDrawersIds,\n        onActiveGlobalDrawersChange,\n        onActiveDrawerChange: onActiveDrawerChangeHandler,\n        drawersFocusRef: drawersFocusControl.refs.toggle,\n        splitPanel,\n        splitPanelToggleProps: {\n          ...splitPanelToggleConfig,\n          active: splitPanelOpen,\n          controlId: splitPanelControlId,\n          position: splitPanelPosition,\n        },\n        splitPanelFocusRef: splitPanelFocusControl.refs.toggle,\n        onSplitPanelToggle: onSplitPanelToggleHandler,\n      },\n      isIntersecting\n    );\n\n    const hasToolbar = !embeddedViewMode && !!toolbarProps;\n    const discoveredBreadcrumbs = useGetGlobalBreadcrumbs(hasToolbar && !breadcrumbs);\n\n    const verticalOffsets = computeVerticalLayout({\n      topOffset: placement.insetBlockStart,\n      hasVisibleToolbar: hasToolbar && toolbarState !== 'hide',\n      notificationsHeight: notificationsHeight ?? 0,\n      toolbarHeight: toolbarHeight ?? 0,\n      stickyNotifications: resolvedStickyNotifications,\n    });\n\n    const appLayoutInternals: AppLayoutInternals = {\n      ariaLabels: ariaLabelsWithDrawers,\n      headerVariant,\n      isMobile,\n      breadcrumbs,\n      discoveredBreadcrumbs,\n      stickyNotifications: resolvedStickyNotifications,\n      navigationOpen: resolvedNavigationOpen,\n      navigation: resolvedNavigation,\n      navigationFocusControl,\n      activeDrawer,\n      activeDrawerSize,\n      minDrawerSize,\n      maxDrawerSize,\n      minGlobalDrawersSizes,\n      maxGlobalDrawersSizes,\n      drawers: drawers!,\n      globalDrawers,\n      activeGlobalDrawers,\n      activeGlobalDrawersIds,\n      activeGlobalDrawersSizes,\n      onActiveGlobalDrawersChange,\n      drawersFocusControl,\n      globalDrawersFocusControl,\n      splitPanelPosition,\n      splitPanelToggleConfig,\n      splitPanelOpen,\n      splitPanelControlId,\n      splitPanelFocusControl,\n      placement,\n      toolbarState,\n      setToolbarState,\n      verticalOffsets,\n      drawersOpenQueue,\n      setToolbarHeight,\n      setNotificationsHeight,\n      onSplitPanelToggle: onSplitPanelToggleHandler,\n      onNavigationToggle,\n      onActiveDrawerChange: onActiveDrawerChangeHandler,\n      onActiveDrawerResize,\n      splitPanelAnimationDisabled,\n    };\n\n    const splitPanelInternals: SplitPanelProviderProps = {\n      bottomOffset: 0,\n      getMaxHeight: () => {\n        const availableHeight =\n          document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;\n        // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n        return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n      },\n      maxWidth: maxSplitPanelSize,\n      isForcedPosition: splitPanelForcedPosition,\n      isOpen: splitPanelOpen,\n      leftOffset: 0,\n      onPreferencesChange: onSplitPanelPreferencesChangeHandler,\n      onResize: onSplitPanelResizeHandler,\n      onToggle: onSplitPanelToggleHandler,\n      position: splitPanelPosition,\n      reportSize: size => setSplitPanelReportedSize(size),\n      reportHeaderHeight: () => {\n        /*unused in this design*/\n      },\n      rightOffset: 0,\n      size: splitPanelSize,\n      topOffset: 0,\n      setSplitPanelToggle: setSplitPanelToggleConfig,\n      refs: splitPanelFocusControl.refs,\n    };\n\n    const closeFirstDrawer = useStableCallback(() => {\n      const drawerToClose = drawersOpenQueue[drawersOpenQueue.length - 1];\n      if (activeDrawer && activeDrawer?.id === drawerToClose) {\n        onActiveDrawerChange(null, { initiatedByUserAction: true });\n      } else if (activeGlobalDrawersIds.includes(drawerToClose)) {\n        onActiveGlobalDrawersChange(drawerToClose, { initiatedByUserAction: true });\n      }\n    });\n\n    useEffect(() => {\n      // Close navigation drawer on mobile so that the main content is visible\n      if (isMobile) {\n        onNavigationToggle(false);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isMobile]);\n\n    const getTotalActiveDrawersMinSize = () => {\n      const combinedDrawers = [...(drawers || []), ...globalDrawers];\n      let result = activeGlobalDrawersIds\n        .map(activeDrawerId =>\n          Math.min(\n            combinedDrawers.find(drawer => drawer.id === activeDrawerId)?.defaultSize ?? MIN_DRAWER_SIZE,\n            MIN_DRAWER_SIZE\n          )\n        )\n        .reduce((acc, curr) => acc + curr, 0);\n      if (activeDrawer) {\n        result += Math.min(activeDrawer?.defaultSize ?? MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n      }\n\n      return result;\n    };\n\n    const totalActiveDrawersMinSize = getTotalActiveDrawersMinSize();\n\n    useEffect(() => {\n      if (isMobile) {\n        return;\n      }\n\n      const activeNavigationWidth = !navigationHide && navigationOpen ? navigationWidth : 0;\n      const scrollWidth = activeNavigationWidth + CONTENT_PADDING + totalActiveDrawersMinSize;\n      const hasHorizontalScroll = scrollWidth > placement.inlineSize;\n      if (hasHorizontalScroll) {\n        if (!navigationHide && navigationOpen) {\n          onNavigationToggle(false);\n          return;\n        }\n\n        closeFirstDrawer();\n      }\n    }, [\n      totalActiveDrawersMinSize,\n      closeFirstDrawer,\n      isMobile,\n      navigationHide,\n      navigationOpen,\n      navigationWidth,\n      onNavigationToggle,\n      placement.inlineSize,\n    ]);\n\n    return (\n      <>\n        {/* Rendering a hidden copy of breadcrumbs to trigger their deduplication */}\n        {!hasToolbar && breadcrumbs ? <ScreenreaderOnly>{breadcrumbs}</ScreenreaderOnly> : null}\n        <SkeletonLayout\n          ref={intersectionObserverRef}\n          style={{\n            [globalVars.stickyVerticalTopOffset]: `${verticalOffsets.header}px`,\n            [globalVars.stickyVerticalBottomOffset]: `${placement.insetBlockEnd}px`,\n            paddingBlockEnd: splitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : '',\n            ...(!isMobile ? { minWidth: `${minContentWidth}px` } : {}),\n          }}\n          toolbar={\n            hasToolbar && <AppLayoutToolbar appLayoutInternals={appLayoutInternals} toolbarProps={toolbarProps} />\n          }\n          notifications={\n            notifications && (\n              <AppLayoutNotifications appLayoutInternals={appLayoutInternals}>{notifications}</AppLayoutNotifications>\n            )\n          }\n          headerVariant={headerVariant}\n          contentHeader={contentHeader}\n          // delay rendering the content until registration of this instance is complete\n          content={registered ? content : null}\n          navigation={resolvedNavigation && <AppLayoutNavigation appLayoutInternals={appLayoutInternals} />}\n          navigationOpen={resolvedNavigationOpen}\n          navigationWidth={navigationWidth}\n          navigationAnimationDisabled={navigationAnimationDisabled}\n          tools={drawers && drawers.length > 0 && <AppLayoutDrawer appLayoutInternals={appLayoutInternals} />}\n          globalTools={\n            <ActiveDrawersContext.Provider value={activeGlobalDrawersIds}>\n              <AppLayoutGlobalDrawers appLayoutInternals={appLayoutInternals} />\n            </ActiveDrawersContext.Provider>\n          }\n          globalToolsOpen={!!activeGlobalDrawersIds.length}\n          toolsOpen={!!activeDrawer}\n          toolsWidth={activeDrawerSize}\n          sideSplitPanel={\n            splitPanelPosition === 'side' && (\n              <AppLayoutSplitPanelSide\n                appLayoutInternals={appLayoutInternals}\n                splitPanelInternals={splitPanelInternals}\n              >\n                {splitPanel}\n              </AppLayoutSplitPanelSide>\n            )\n          }\n          bottomSplitPanel={\n            splitPanelPosition === 'bottom' && (\n              <AppLayoutSplitPanelBottom\n                appLayoutInternals={appLayoutInternals}\n                splitPanelInternals={splitPanelInternals}\n              >\n                {splitPanel}\n              </AppLayoutSplitPanelBottom>\n            )\n          }\n          splitPanelOpen={splitPanelOpen}\n          placement={placement}\n          contentType={contentType}\n          maxContentWidth={maxContentWidth}\n          disableContentPaddings={disableContentPaddings}\n        />\n      </>\n    );\n  }\n);\n\nexport default AppLayoutVisualRefreshToolbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}