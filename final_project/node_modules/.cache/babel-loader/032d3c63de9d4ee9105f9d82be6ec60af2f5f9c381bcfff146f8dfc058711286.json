{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useDensityMode } from '@cloudscape-design/component-toolkit/internal';\nimport { getVisualContextClassname } from '../../internal/components/visual-context';\nimport { CloseButton, ToggleButton, togglesConfig } from '../toggles';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\nimport { splitItems } from './drawers-helpers';\nimport OverflowMenu from './overflow-menu';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n// We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\nexport const Drawer = React.forwardRef(({\n  id,\n  contentClassName,\n  toggleClassName,\n  closeClassName,\n  width,\n  type,\n  toggleRefs,\n  topOffset,\n  bottomOffset,\n  ariaLabels,\n  children,\n  hideOpenButton,\n  isOpen,\n  isHidden,\n  isMobile,\n  onToggle,\n  onClick,\n  onLoseFocus,\n  resizeHandle\n}, ref) => {\n  const openButtonWrapperRef = useRef(null);\n  const {\n    TagName,\n    iconName\n  } = togglesConfig[type];\n  const {\n    mainLabel,\n    closeLabel,\n    openLabel\n  } = ariaLabels;\n  const drawerContentWidthOpen = isMobile ? undefined : width;\n  const drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n  const regularOpenButton = React.createElement(TagName, {\n    ref: openButtonWrapperRef,\n    \"aria-label\": mainLabel,\n    className: styles.toggle,\n    \"aria-hidden\": isOpen\n  }, React.createElement(ToggleButton, {\n    ref: toggleRefs.toggle,\n    className: toggleClassName,\n    iconName: iconName,\n    ariaLabel: openLabel,\n    onClick: () => onToggle(true),\n    ariaExpanded: isOpen ? undefined : false\n  }));\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: clsx(styles.drawer, {\n      [styles.hide]: isHidden,\n      [styles['drawer-closed']]: !isOpen,\n      [styles['drawer-mobile']]: isMobile\n    }),\n    style: {\n      width: drawerContentWidth\n    },\n    onBlur: onLoseFocus ? e => {\n      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n        onLoseFocus(e);\n      }\n    } : undefined,\n    onClick: event => {\n      var _a;\n      if (onClick) {\n        onClick(event);\n      }\n      if (!isOpen) {\n        // to prevent calling onToggle from the drawer when it's called from the toggle button\n        if (openButtonWrapperRef.current === event.target || !((_a = openButtonWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\n          onToggle(true);\n        }\n      }\n    }\n  }, React.createElement(\"div\", {\n    id: id,\n    style: {\n      width: drawerContentWidth,\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    className: clsx(styles['drawer-content'], styles['drawer-content-clickable'], contentClassName, {\n      [testutilStyles['drawer-closed']]: !isOpen\n    })\n  }, !isMobile && !hideOpenButton && regularOpenButton, React.createElement(TagName, {\n    className: clsx(resizeHandle && styles['drawer-resize-content'], styles['drawer-content-wrapper']),\n    \"aria-label\": mainLabel,\n    \"aria-hidden\": !isOpen,\n    style: {\n      blockSize: `calc(100vh - ${(topOffset || 0) + (bottomOffset || 0)}px)`\n    }\n  }, !isMobile && isOpen && React.createElement(\"div\", {\n    className: styles['resize-handle-wrapper']\n  }, resizeHandle), React.createElement(CloseButton, {\n    ref: toggleRefs.close,\n    className: closeClassName,\n    ariaLabel: closeLabel,\n    onClick: () => {\n      onToggle(false);\n    }\n  }), children)));\n});\nconst DrawerTrigger = React.forwardRef(({\n  testUtilsClassName,\n  ariaLabel,\n  ariaExpanded,\n  ariaControls,\n  badge,\n  itemId,\n  isActive,\n  trigger,\n  onClick\n}, ref) => React.createElement(\"div\", {\n  className: clsx(styles['drawer-trigger'], isActive && styles['drawer-trigger-active'], isActive && getVisualContextClassname('app-layout-tools-drawer-trigger')),\n  onClick: onClick\n}, React.createElement(ToggleButton, {\n  ref: ref,\n  className: testUtilsClassName,\n  iconName: trigger.iconName,\n  iconSvg: trigger.iconSvg,\n  ariaLabel: ariaLabel,\n  ariaExpanded: ariaExpanded,\n  ariaControls: ariaControls,\n  badge: badge,\n  testId: itemId && `awsui-app-layout-trigger-${itemId}`\n})));\nexport const DrawerTriggersBar = ({\n  isMobile,\n  topOffset,\n  bottomOffset,\n  activeDrawerId,\n  ariaLabels,\n  drawers,\n  drawerRefs,\n  onDrawerChange\n}) => {\n  const containerRef = React.useRef(null);\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  const isCompactMode = useDensityMode(containerRef) === 'compact';\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = isCompactMode ? 34 : 38;\n      const overflowSpot = containerHeight / 1.5;\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n      return index;\n    }\n    return 0;\n  };\n  const {\n    visibleItems,\n    overflowItems\n  } = splitItems(drawers, getIndexOfOverflowItem(), activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  return React.createElement(\"div\", {\n    className: clsx(styles.drawer, styles['drawer-closed'], testutilStyles['drawer-closed'], {\n      [styles['drawer-mobile']]: isMobile,\n      [styles.hide]: drawers.length === 1 && !!activeDrawerId\n    }),\n    ref: containerRef\n  }, React.createElement(\"div\", {\n    ref: triggersContainerRef,\n    style: {\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    className: clsx(styles['drawer-content'], {\n      [styles['drawer-content-clickable']]: drawers.length === 1\n    }),\n    onClick: drawers.length === 1 ? () => onDrawerChange(drawers[0].id !== activeDrawerId ? drawers[0].id : null) : undefined\n  }, !isMobile && React.createElement(\"aside\", {\n    \"aria-label\": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: styles['drawer-triggers-wrapper'],\n    role: \"toolbar\",\n    \"aria-orientation\": \"vertical\"\n  }, visibleItems.map((item, index) => {\n    var _a;\n    return React.createElement(DrawerTrigger, {\n      key: index,\n      testUtilsClassName: clsx(testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      ariaExpanded: activeDrawerId === item.id,\n      ref: item.id === previousActiveDrawerId.current ? drawerRefs.toggle : undefined,\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaControls: activeDrawerId === item.id ? item.id : undefined,\n      trigger: item.trigger,\n      badge: item.badge,\n      itemId: item.id,\n      isActive: activeDrawerId === item.id,\n      onClick: drawers.length !== 1 ? () => onDrawerChange(item.id !== activeDrawerId ? item.id : null) : undefined\n    });\n  }), overflowItems.length > 0 && React.createElement(\"div\", {\n    className: styles['drawer-trigger']\n  }, React.createElement(OverflowMenu, {\n    ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow,\n    items: overflowItems,\n    onItemClick: ({\n      detail\n    }) => onDrawerChange(detail.id)\n  }))))));\n};","map":{"version":3,"names":["React","useRef","clsx","useContainerQuery","useDensityMode","getVisualContextClassname","CloseButton","ToggleButton","togglesConfig","TOOLS_DRAWER_ID","splitItems","OverflowMenu","testutilStyles","styles","Drawer","forwardRef","id","contentClassName","toggleClassName","closeClassName","width","type","toggleRefs","topOffset","bottomOffset","ariaLabels","children","hideOpenButton","isOpen","isHidden","isMobile","onToggle","onClick","onLoseFocus","resizeHandle","ref","openButtonWrapperRef","TagName","iconName","mainLabel","closeLabel","openLabel","drawerContentWidthOpen","undefined","drawerContentWidth","regularOpenButton","createElement","className","toggle","ariaLabel","ariaExpanded","drawer","hide","style","onBlur","e","relatedTarget","currentTarget","contains","event","current","target","_a","top","bottom","blockSize","close","DrawerTrigger","testUtilsClassName","ariaControls","badge","itemId","isActive","trigger","iconSvg","testId","DrawerTriggersBar","activeDrawerId","drawers","drawerRefs","onDrawerChange","containerRef","previousActiveDrawerId","containerHeight","triggersContainerRef","rect","contentBoxHeight","isCompactMode","getIndexOfOverflowItem","ITEM_HEIGHT","overflowSpot","index","Math","floor","visibleItems","overflowItems","overflowMenuHasBadge","find","item","length","role","map","key","triggerButton","drawersOverflowWithBadge","drawersOverflow","items","onItemClick","detail"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\app-layout\\drawer\\index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useDensityMode } from '@cloudscape-design/component-toolkit/internal';\n\nimport { getVisualContextClassname } from '../../internal/components/visual-context';\nimport { AppLayoutProps } from '../interfaces';\nimport { CloseButton, ToggleButton, togglesConfig } from '../toggles';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\nimport { splitItems } from './drawers-helpers';\nimport { DesktopDrawerProps, DrawerTriggersBarProps } from './interfaces';\nimport OverflowMenu from './overflow-menu';\n\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\n// We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\nexport const Drawer = React.forwardRef(\n  (\n    {\n      id,\n      contentClassName,\n      toggleClassName,\n      closeClassName,\n      width,\n      type,\n      toggleRefs,\n      topOffset,\n      bottomOffset,\n      ariaLabels,\n      children,\n      hideOpenButton,\n      isOpen,\n      isHidden,\n      isMobile,\n      onToggle,\n      onClick,\n      onLoseFocus,\n      resizeHandle,\n    }: DesktopDrawerProps,\n    ref: React.Ref<HTMLDivElement>\n  ) => {\n    const openButtonWrapperRef = useRef<HTMLElement | null>(null);\n    const { TagName, iconName } = togglesConfig[type];\n    const { mainLabel, closeLabel, openLabel } = ariaLabels;\n    const drawerContentWidthOpen = isMobile ? undefined : width;\n    const drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n\n    const regularOpenButton = (\n      <TagName ref={openButtonWrapperRef} aria-label={mainLabel} className={styles.toggle} aria-hidden={isOpen}>\n        <ToggleButton\n          ref={toggleRefs.toggle}\n          className={toggleClassName}\n          iconName={iconName}\n          ariaLabel={openLabel}\n          onClick={() => onToggle(true)}\n          ariaExpanded={isOpen ? undefined : false}\n        />\n      </TagName>\n    );\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(styles.drawer, {\n          [styles.hide]: isHidden,\n          [styles['drawer-closed']]: !isOpen,\n          [styles['drawer-mobile']]: isMobile,\n        })}\n        style={{ width: drawerContentWidth }}\n        onBlur={\n          onLoseFocus\n            ? e => {\n                if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n                  onLoseFocus(e);\n                }\n              }\n            : undefined\n        }\n        onClick={event => {\n          if (onClick) {\n            onClick(event);\n          }\n          if (!isOpen) {\n            // to prevent calling onToggle from the drawer when it's called from the toggle button\n            if (\n              openButtonWrapperRef.current === event.target ||\n              !openButtonWrapperRef.current?.contains(event.target as Node)\n            ) {\n              onToggle(true);\n            }\n          }\n        }}\n      >\n        <div\n          id={id}\n          style={{ width: drawerContentWidth, top: topOffset, bottom: bottomOffset }}\n          className={clsx(styles['drawer-content'], styles['drawer-content-clickable'], contentClassName, {\n            [testutilStyles['drawer-closed']]: !isOpen,\n          })}\n        >\n          {!isMobile && !hideOpenButton && regularOpenButton}\n          <TagName\n            className={clsx(resizeHandle && styles['drawer-resize-content'], styles['drawer-content-wrapper'])}\n            aria-label={mainLabel}\n            aria-hidden={!isOpen}\n            style={{\n              blockSize: `calc(100vh - ${(topOffset || 0) + (bottomOffset || 0)}px)`,\n            }}\n          >\n            {!isMobile && isOpen && <div className={styles['resize-handle-wrapper']}>{resizeHandle}</div>}\n            <CloseButton\n              ref={toggleRefs.close}\n              className={closeClassName}\n              ariaLabel={closeLabel}\n              onClick={() => {\n                onToggle(false);\n              }}\n            />\n            {children}\n          </TagName>\n        </div>\n      </div>\n    );\n  }\n);\n\ninterface DrawerTriggerProps {\n  testUtilsClassName?: string;\n  ariaLabel: string | undefined;\n  ariaExpanded: boolean;\n  ariaControls?: string;\n  badge: boolean | undefined;\n  itemId?: string;\n  isActive: boolean;\n  trigger: AppLayoutProps.Drawer['trigger'];\n  onClick: (() => void) | undefined;\n}\n\nconst DrawerTrigger = React.forwardRef(\n  (\n    {\n      testUtilsClassName,\n      ariaLabel,\n      ariaExpanded,\n      ariaControls,\n      badge,\n      itemId,\n      isActive,\n      trigger,\n      onClick,\n    }: DrawerTriggerProps,\n    ref: React.Ref<{ focus: () => void }>\n  ) => (\n    <div\n      className={clsx(\n        styles['drawer-trigger'],\n        isActive && styles['drawer-trigger-active'],\n        isActive && getVisualContextClassname('app-layout-tools-drawer-trigger')\n      )}\n      onClick={onClick}\n    >\n      <ToggleButton\n        ref={ref}\n        className={testUtilsClassName}\n        iconName={trigger!.iconName}\n        iconSvg={trigger!.iconSvg}\n        ariaLabel={ariaLabel}\n        ariaExpanded={ariaExpanded}\n        ariaControls={ariaControls}\n        badge={badge}\n        testId={itemId && `awsui-app-layout-trigger-${itemId}`}\n      />\n    </div>\n  )\n);\n\nexport const DrawerTriggersBar = ({\n  isMobile,\n  topOffset,\n  bottomOffset,\n  activeDrawerId,\n  ariaLabels,\n  drawers,\n  drawerRefs,\n  onDrawerChange,\n}: DrawerTriggersBarProps) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  const isCompactMode = useDensityMode(containerRef) === 'compact';\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = isCompactMode ? 34 : 38;\n      const overflowSpot = containerHeight / 1.5;\n\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n\n      return index;\n    }\n    return 0;\n  };\n\n  const { visibleItems, overflowItems } = splitItems(drawers, getIndexOfOverflowItem(), activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <div\n      className={clsx(styles.drawer, styles['drawer-closed'], testutilStyles['drawer-closed'], {\n        [styles['drawer-mobile']]: isMobile,\n        [styles.hide]: drawers.length === 1 && !!activeDrawerId,\n      })}\n      ref={containerRef}\n    >\n      <div\n        ref={triggersContainerRef}\n        style={{ top: topOffset, bottom: bottomOffset }}\n        className={clsx(styles['drawer-content'], {\n          [styles['drawer-content-clickable']]: drawers.length === 1,\n        })}\n        onClick={\n          drawers.length === 1\n            ? () => onDrawerChange(drawers[0].id !== activeDrawerId ? drawers[0].id : null)\n            : undefined\n        }\n      >\n        {!isMobile && (\n          <aside aria-label={ariaLabels?.drawers} role=\"region\">\n            <div className={styles['drawer-triggers-wrapper']} role=\"toolbar\" aria-orientation=\"vertical\">\n              {visibleItems.map((item, index) => {\n                return (\n                  <DrawerTrigger\n                    key={index}\n                    testUtilsClassName={clsx(\n                      testutilStyles['drawers-trigger'],\n                      item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n                    )}\n                    ariaExpanded={activeDrawerId === item.id}\n                    ref={item.id === previousActiveDrawerId.current ? drawerRefs.toggle : undefined}\n                    ariaLabel={item.ariaLabels?.triggerButton}\n                    ariaControls={activeDrawerId === item.id ? item.id : undefined}\n                    trigger={item.trigger}\n                    badge={item.badge}\n                    itemId={item.id}\n                    isActive={activeDrawerId === item.id}\n                    onClick={\n                      drawers.length !== 1\n                        ? () => onDrawerChange(item.id !== activeDrawerId ? item.id : null)\n                        : undefined\n                    }\n                  />\n                );\n              })}\n              {overflowItems.length > 0 && (\n                <div className={styles['drawer-trigger']}>\n                  <OverflowMenu\n                    ariaLabel={\n                      overflowMenuHasBadge ? ariaLabels?.drawersOverflowWithBadge : ariaLabels?.drawersOverflow\n                    }\n                    items={overflowItems}\n                    onItemClick={({ detail }) => onDrawerChange(detail.id)}\n                  />\n                </div>\n              )}\n            </div>\n          </aside>\n        )}\n      </div>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}