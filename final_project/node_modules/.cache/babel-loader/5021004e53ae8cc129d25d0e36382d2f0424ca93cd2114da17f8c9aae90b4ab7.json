{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport InternalBox from '../box/internal';\nimport { InternalButton } from '../button/internal';\nimport { useInternalI18n } from '../i18n/context';\nimport { getBaseProps } from '../internal/base-component';\nimport { CollectionPreferencesMetadata } from '../internal/context/collection-preferences-metadata-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { getComponentAnalyticsMetadata } from './analytics-metadata/utils';\nimport ContentDisplayPreference from './content-display';\nimport { ContentDensityPreference, copyPreferences, CustomPreference, mergePreferences, ModalContentLayout, PageSizePreference, StickyColumnsPreference, StripedRowsPreference, WrapLinesPreference } from './utils';\nimport VisibleContentPreference from './visible-content';\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nimport styles from './styles.css.js';\nconst componentName = 'CollectionPreferences';\nexport default function CollectionPreferences(_a) {\n  var _b;\n  var {\n      title,\n      confirmLabel,\n      cancelLabel,\n      disabled = false,\n      onConfirm,\n      onCancel,\n      visibleContentPreference,\n      contentDisplayPreference,\n      pageSizePreference,\n      wrapLinesPreference,\n      stripedRowsPreference,\n      contentDensityPreference,\n      stickyColumnsPreference,\n      preferences,\n      customPreference,\n      getModalRoot,\n      removeModalRoot\n    } = _a,\n    rest = __rest(_a, [\"title\", \"confirmLabel\", \"cancelLabel\", \"disabled\", \"onConfirm\", \"onCancel\", \"visibleContentPreference\", \"contentDisplayPreference\", \"pageSizePreference\", \"wrapLinesPreference\", \"stripedRowsPreference\", \"contentDensityPreference\", \"stickyColumnsPreference\", \"preferences\", \"customPreference\", \"getModalRoot\", \"removeModalRoot\"]);\n  const parentMetadata = useContext(CollectionPreferencesMetadata);\n  const {\n    __internalRootRef\n  } = useBaseComponent('CollectionPreferences', {\n    props: {},\n    metadata: Object.assign(Object.assign({}, parentMetadata), {\n      hasStripedRowsPreference: !!stripedRowsPreference,\n      hasVisibleContentPreference: !!visibleContentPreference,\n      hasContentDisplayPreference: !!contentDisplayPreference,\n      hasContentDensityPreference: !!contentDensityPreference,\n      hasStickyColumnsPreference: !!stickyColumnsPreference,\n      visibleContentOptionsCount: (_b = visibleContentPreference === null || visibleContentPreference === void 0 ? void 0 : visibleContentPreference.options) === null || _b === void 0 ? void 0 : _b.length\n    })\n  });\n  checkControlled('CollectionPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n  const i18n = useInternalI18n('collection-preferences');\n  const baseProps = getBaseProps(rest);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [temporaryPreferences, setTemporaryPreferences] = useState(copyPreferences(preferences || {}));\n  const triggerRef = useRef(null);\n  const dialogPreviouslyOpen = useRef(false);\n  useEffect(() => {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n  const onConfirmListener = () => {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n  const onCancelListener = () => {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n  const hasContentOnTheLeft = !!(pageSizePreference || wrapLinesPreference || stripedRowsPreference || contentDensityPreference || stickyColumnsPreference || customPreference);\n  const hasContentOnTheRight = !!(visibleContentPreference || contentDisplayPreference);\n  const onChange = changedPreferences => setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));\n  if (visibleContentPreference && contentDisplayPreference) {\n    warnOnce(componentName, 'You provided both `visibleContentPreference` and `contentDisplayPreference` props. `visibleContentPreference` will be ignored and only `contentDisplayPreference` will be rendered.');\n  }\n  const referrerId = useUniqueId();\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), React.createElement(\"div\", Object.assign({\n    id: referrerId\n  }, getAnalyticsMetadataAttribute({\n    component: getComponentAnalyticsMetadata(disabled, preferences)\n  })), React.createElement(InternalButton, {\n    ref: triggerRef,\n    className: clsx(styles['trigger-button'], analyticsSelectors['trigger-button']),\n    disabled: disabled,\n    ariaLabel: i18n('title', title),\n    onClick: () => {\n      setTemporaryPreferences(copyPreferences(preferences || {}));\n      setModalVisible(true);\n    },\n    variant: \"icon\",\n    iconName: \"settings\",\n    formAction: \"none\",\n    analyticsAction: \"open\"\n  }), !disabled && modalVisible && React.createElement(InternalModal, {\n    className: styles['modal-root'],\n    visible: true,\n    getModalRoot: getModalRoot,\n    removeModalRoot: removeModalRoot,\n    header: i18n('title', title),\n    referrerId: referrerId,\n    footer: React.createElement(InternalBox, {\n      float: \"right\"\n    }, React.createElement(InternalSpaceBetween, {\n      direction: \"horizontal\",\n      size: \"xs\"\n    }, React.createElement(InternalButton, {\n      className: styles['cancel-button'],\n      variant: \"link\",\n      formAction: \"none\",\n      onClick: onCancelListener,\n      analyticsAction: \"cancel\"\n    }, i18n('cancelLabel', cancelLabel)), React.createElement(InternalButton, {\n      className: styles['confirm-button'],\n      variant: \"primary\",\n      formAction: \"none\",\n      onClick: onConfirmListener,\n      analyticsAction: \"confirm\"\n    }, i18n('confirmLabel', confirmLabel)))),\n    closeAriaLabel: cancelLabel,\n    size: hasContentOnTheLeft && hasContentOnTheRight ? 'large' : 'medium',\n    onDismiss: onCancelListener\n  }, React.createElement(ModalContentLayout, {\n    left: hasContentOnTheLeft && React.createElement(InternalSpaceBetween, {\n      size: \"l\"\n    }, pageSizePreference && React.createElement(PageSizePreference, Object.assign({\n      value: temporaryPreferences.pageSize\n    }, pageSizePreference, {\n      onChange: pageSize => onChange({\n        pageSize\n      })\n    })), wrapLinesPreference && React.createElement(WrapLinesPreference, Object.assign({\n      value: temporaryPreferences.wrapLines\n    }, wrapLinesPreference, {\n      onChange: wrapLines => onChange({\n        wrapLines\n      })\n    })), stripedRowsPreference && React.createElement(StripedRowsPreference, Object.assign({\n      value: temporaryPreferences.stripedRows\n    }, stripedRowsPreference, {\n      onChange: stripedRows => onChange({\n        stripedRows\n      })\n    })), contentDensityPreference && React.createElement(ContentDensityPreference, Object.assign({\n      value: temporaryPreferences.contentDensity\n    }, contentDensityPreference, {\n      onChange: contentDensity => onChange({\n        contentDensity\n      })\n    })), stickyColumnsPreference && React.createElement(StickyColumnsPreference, Object.assign({\n      value: temporaryPreferences.stickyColumns\n    }, stickyColumnsPreference, {\n      onChange: stickyColumns => onChange({\n        stickyColumns\n      })\n    })), customPreference && React.createElement(CustomPreference, {\n      value: temporaryPreferences.custom,\n      customPreference: customPreference,\n      onChange: custom => onChange({\n        custom\n      })\n    })),\n    right: contentDisplayPreference ? React.createElement(ContentDisplayPreference, Object.assign({}, contentDisplayPreference, {\n      value: temporaryPreferences.contentDisplay,\n      onChange: contentDisplay => onChange({\n        contentDisplay\n      })\n    })) : visibleContentPreference && React.createElement(VisibleContentPreference, Object.assign({\n      value: temporaryPreferences.visibleContent\n    }, visibleContentPreference, {\n      onChange: visibleItems => onChange({\n        visibleContent: visibleItems\n      })\n    }))\n  }))));\n}\napplyDisplayName(CollectionPreferences, componentName);","map":{"version":3,"names":["React","useContext","useEffect","useRef","useState","clsx","warnOnce","getAnalyticsMetadataAttribute","InternalBox","InternalButton","useInternalI18n","getBaseProps","CollectionPreferencesMetadata","fireNonCancelableEvent","checkControlled","useBaseComponent","useUniqueId","applyDisplayName","InternalModal","InternalSpaceBetween","getComponentAnalyticsMetadata","ContentDisplayPreference","ContentDensityPreference","copyPreferences","CustomPreference","mergePreferences","ModalContentLayout","PageSizePreference","StickyColumnsPreference","StripedRowsPreference","WrapLinesPreference","VisibleContentPreference","analyticsSelectors","styles","componentName","CollectionPreferences","_a","title","confirmLabel","cancelLabel","disabled","onConfirm","onCancel","visibleContentPreference","contentDisplayPreference","pageSizePreference","wrapLinesPreference","stripedRowsPreference","contentDensityPreference","stickyColumnsPreference","preferences","customPreference","getModalRoot","removeModalRoot","rest","__rest","parentMetadata","__internalRootRef","props","metadata","Object","assign","hasStripedRowsPreference","hasVisibleContentPreference","hasContentDisplayPreference","hasContentDensityPreference","hasStickyColumnsPreference","visibleContentOptionsCount","_b","options","length","i18n","baseProps","modalVisible","setModalVisible","temporaryPreferences","setTemporaryPreferences","triggerRef","dialogPreviouslyOpen","current","focus","onConfirmListener","onCancelListener","hasContentOnTheLeft","hasContentOnTheRight","onChange","changedPreferences","referrerId","createElement","className","root","ref","id","component","ariaLabel","onClick","variant","iconName","formAction","analyticsAction","visible","header","footer","float","direction","size","closeAriaLabel","onDismiss","left","value","pageSize","wrapLines","stripedRows","contentDensity","stickyColumns","custom","right","contentDisplay","visibleContent","visibleItems"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\collection-preferences\\index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport InternalBox from '../box/internal';\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\nimport { useInternalI18n } from '../i18n/context';\nimport { getBaseProps } from '../internal/base-component';\nimport { CollectionPreferencesMetadata } from '../internal/context/collection-preferences-metadata-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { getComponentAnalyticsMetadata } from './analytics-metadata/utils';\nimport ContentDisplayPreference from './content-display';\nimport { CollectionPreferencesProps } from './interfaces';\nimport {\n  ContentDensityPreference,\n  copyPreferences,\n  CustomPreference,\n  mergePreferences,\n  ModalContentLayout,\n  PageSizePreference,\n  StickyColumnsPreference,\n  StripedRowsPreference,\n  WrapLinesPreference,\n} from './utils';\nimport VisibleContentPreference from './visible-content';\n\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nimport styles from './styles.css.js';\n\nexport { CollectionPreferencesProps };\n\nconst componentName = 'CollectionPreferences';\n\nexport default function CollectionPreferences({\n  title,\n  confirmLabel,\n  cancelLabel,\n  disabled = false,\n  onConfirm,\n  onCancel,\n  visibleContentPreference,\n  contentDisplayPreference,\n  pageSizePreference,\n  wrapLinesPreference,\n  stripedRowsPreference,\n  contentDensityPreference,\n  stickyColumnsPreference,\n  preferences,\n  customPreference,\n  getModalRoot,\n  removeModalRoot,\n  ...rest\n}: CollectionPreferencesProps) {\n  const parentMetadata = useContext(CollectionPreferencesMetadata);\n  const { __internalRootRef } = useBaseComponent('CollectionPreferences', {\n    props: {},\n    metadata: {\n      ...parentMetadata,\n      hasStripedRowsPreference: !!stripedRowsPreference,\n      hasVisibleContentPreference: !!visibleContentPreference,\n      hasContentDisplayPreference: !!contentDisplayPreference,\n      hasContentDensityPreference: !!contentDensityPreference,\n      hasStickyColumnsPreference: !!stickyColumnsPreference,\n      visibleContentOptionsCount: visibleContentPreference?.options?.length,\n    },\n  });\n  checkControlled('CollectionPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n\n  const i18n = useInternalI18n('collection-preferences');\n  const baseProps = getBaseProps(rest);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [temporaryPreferences, setTemporaryPreferences] = useState(copyPreferences(preferences || {}));\n  const triggerRef = useRef<ButtonProps.Ref>(null);\n  const dialogPreviouslyOpen = useRef(false);\n\n  useEffect(() => {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n\n  const onConfirmListener = () => {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n\n  const onCancelListener = () => {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n\n  const hasContentOnTheLeft = !!(\n    pageSizePreference ||\n    wrapLinesPreference ||\n    stripedRowsPreference ||\n    contentDensityPreference ||\n    stickyColumnsPreference ||\n    customPreference\n  );\n  const hasContentOnTheRight = !!(visibleContentPreference || contentDisplayPreference);\n\n  const onChange = (changedPreferences: CollectionPreferencesProps.Preferences) =>\n    setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));\n\n  if (visibleContentPreference && contentDisplayPreference) {\n    warnOnce(\n      componentName,\n      'You provided both `visibleContentPreference` and `contentDisplayPreference` props. `visibleContentPreference` will be ignored and only `contentDisplayPreference` will be rendered.'\n    );\n  }\n\n  const referrerId = useUniqueId();\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={__internalRootRef}>\n      <div\n        id={referrerId}\n        {...getAnalyticsMetadataAttribute({ component: getComponentAnalyticsMetadata(disabled, preferences) })}\n      >\n        <InternalButton\n          ref={triggerRef}\n          className={clsx(styles['trigger-button'], analyticsSelectors['trigger-button'])}\n          disabled={disabled}\n          ariaLabel={i18n('title', title)}\n          onClick={() => {\n            setTemporaryPreferences(copyPreferences(preferences || {}));\n            setModalVisible(true);\n          }}\n          variant=\"icon\"\n          iconName=\"settings\"\n          formAction=\"none\"\n          analyticsAction=\"open\"\n        />\n        {!disabled && modalVisible && (\n          <InternalModal\n            className={styles['modal-root']}\n            visible={true}\n            getModalRoot={getModalRoot}\n            removeModalRoot={removeModalRoot}\n            header={i18n('title', title)}\n            referrerId={referrerId}\n            footer={\n              <InternalBox float=\"right\">\n                <InternalSpaceBetween direction=\"horizontal\" size=\"xs\">\n                  <InternalButton\n                    className={styles['cancel-button']}\n                    variant=\"link\"\n                    formAction=\"none\"\n                    onClick={onCancelListener}\n                    analyticsAction=\"cancel\"\n                  >\n                    {i18n('cancelLabel', cancelLabel)}\n                  </InternalButton>\n                  <InternalButton\n                    className={styles['confirm-button']}\n                    variant=\"primary\"\n                    formAction=\"none\"\n                    onClick={onConfirmListener}\n                    analyticsAction=\"confirm\"\n                  >\n                    {i18n('confirmLabel', confirmLabel)}\n                  </InternalButton>\n                </InternalSpaceBetween>\n              </InternalBox>\n            }\n            closeAriaLabel={cancelLabel}\n            size={hasContentOnTheLeft && hasContentOnTheRight ? 'large' : 'medium'}\n            onDismiss={onCancelListener}\n          >\n            <ModalContentLayout\n              left={\n                hasContentOnTheLeft && (\n                  <InternalSpaceBetween size=\"l\">\n                    {pageSizePreference && (\n                      <PageSizePreference\n                        value={temporaryPreferences.pageSize}\n                        {...pageSizePreference}\n                        onChange={pageSize => onChange({ pageSize })}\n                      />\n                    )}\n                    {wrapLinesPreference && (\n                      <WrapLinesPreference\n                        value={temporaryPreferences.wrapLines}\n                        {...wrapLinesPreference}\n                        onChange={wrapLines => onChange({ wrapLines })}\n                      />\n                    )}\n                    {stripedRowsPreference && (\n                      <StripedRowsPreference\n                        value={temporaryPreferences.stripedRows}\n                        {...stripedRowsPreference}\n                        onChange={stripedRows => onChange({ stripedRows })}\n                      />\n                    )}\n                    {contentDensityPreference && (\n                      <ContentDensityPreference\n                        value={temporaryPreferences.contentDensity}\n                        {...contentDensityPreference}\n                        onChange={contentDensity => onChange({ contentDensity })}\n                      />\n                    )}\n                    {stickyColumnsPreference && (\n                      <StickyColumnsPreference\n                        value={temporaryPreferences.stickyColumns}\n                        {...stickyColumnsPreference}\n                        onChange={stickyColumns => onChange({ stickyColumns })}\n                      />\n                    )}\n                    {customPreference && (\n                      <CustomPreference\n                        value={temporaryPreferences.custom}\n                        customPreference={customPreference}\n                        onChange={custom => onChange({ custom })}\n                      />\n                    )}\n                  </InternalSpaceBetween>\n                )\n              }\n              right={\n                contentDisplayPreference ? (\n                  <ContentDisplayPreference\n                    {...contentDisplayPreference}\n                    value={temporaryPreferences.contentDisplay}\n                    onChange={contentDisplay => onChange({ contentDisplay })}\n                  />\n                ) : (\n                  visibleContentPreference && (\n                    <VisibleContentPreference\n                      value={temporaryPreferences.visibleContent}\n                      {...visibleContentPreference}\n                      onChange={visibleItems => onChange({ visibleContent: visibleItems })}\n                    />\n                  )\n                )\n              }\n            />\n          </InternalModal>\n        )}\n      </div>\n    </div>\n  );\n}\n\napplyDisplayName(CollectionPreferences, componentName);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}