{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useState } from 'react';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nfunction checkAlreadyExists(value, propName) {\n  if (value) {\n    warnOnce('AppLayout', `Another app layout instance on this page already defines ${propName} property. This instance will be ignored.`);\n    return true;\n  }\n  return false;\n}\nexport function mergeProps(ownProps, additionalProps) {\n  var _a;\n  const toolbar = {};\n  for (const props of [ownProps, ...additionalProps]) {\n    toolbar.ariaLabels = Object.assign((_a = toolbar.ariaLabels) !== null && _a !== void 0 ? _a : {}, props.ariaLabels);\n    if (props.drawers && !checkAlreadyExists(!!toolbar.drawers, 'tools or drawers')) {\n      toolbar.drawers = props.drawers;\n      toolbar.activeDrawerId = props.activeDrawerId;\n      toolbar.drawersFocusRef = props.drawersFocusRef;\n      toolbar.onActiveDrawerChange = props.onActiveDrawerChange;\n    }\n    if (props.globalDrawers && !checkAlreadyExists(!!toolbar.globalDrawers, 'globalDrawers')) {\n      toolbar.globalDrawersFocusControl = props.globalDrawersFocusControl;\n      toolbar.globalDrawers = props.globalDrawers;\n      toolbar.activeGlobalDrawersIds = props.activeGlobalDrawersIds;\n      toolbar.onActiveGlobalDrawersChange = props.onActiveGlobalDrawersChange;\n    }\n    if (props.navigation && !checkAlreadyExists(!!toolbar.hasNavigation, 'navigation')) {\n      // there is never a case where navigation will exist and a toggle will not so toolbar\n      // can use the hasNavigation here to conditionally render the navigationToggle button\n      toolbar.hasNavigation = true;\n      toolbar.navigationOpen = props.navigationOpen;\n      toolbar.navigationFocusRef = props.navigationFocusRef;\n      toolbar.onNavigationToggle = props.onNavigationToggle;\n    }\n    if (props.splitPanel && !checkAlreadyExists(!!toolbar.hasSplitPanel, 'splitPanel')) {\n      toolbar.hasSplitPanel = true;\n      toolbar.splitPanelFocusRef = props.splitPanelFocusRef;\n      toolbar.splitPanelToggleProps = props.splitPanelToggleProps;\n      toolbar.onSplitPanelToggle = props.onSplitPanelToggle;\n    }\n    if (props.breadcrumbs && !checkAlreadyExists(!!toolbar.hasBreadcrumbsPortal, 'hasBreadcrumbsPortal')) {\n      toolbar.hasBreadcrumbsPortal = true;\n    }\n  }\n  // do not render toolbar if no fields are defined, except ariaLabels, which are always there\n  return Object.keys(toolbar).filter(key => key !== 'ariaLabels').length > 0 ? toolbar : null;\n}\nexport function useMultiAppLayout(props, isEnabled) {\n  const [registration, setRegistration] = useState(null);\n  const {\n    forceDeduplicationType\n  } = props;\n  useLayoutEffect(() => {\n    if (!isEnabled || forceDeduplicationType === 'suspended') {\n      return;\n    }\n    if (forceDeduplicationType === 'off') {\n      setRegistration({\n        type: 'primary',\n        discoveredProps: []\n      });\n      return;\n    }\n    return awsuiPluginsInternal.appLayoutWidget.register(forceDeduplicationType, props => setRegistration(props));\n  }, [forceDeduplicationType, isEnabled]);\n  useLayoutEffect(() => {\n    if ((registration === null || registration === void 0 ? void 0 : registration.type) === 'secondary') {\n      registration.update(props);\n    }\n  });\n  return {\n    registered: !!(registration === null || registration === void 0 ? void 0 : registration.type),\n    toolbarProps: (registration === null || registration === void 0 ? void 0 : registration.type) === 'primary' ? mergeProps(props, registration.discoveredProps) : null\n  };\n}","map":{"version":3,"names":["useLayoutEffect","useState","warnOnce","awsuiPluginsInternal","checkAlreadyExists","value","propName","mergeProps","ownProps","additionalProps","toolbar","props","ariaLabels","Object","assign","_a","drawers","activeDrawerId","drawersFocusRef","onActiveDrawerChange","globalDrawers","globalDrawersFocusControl","activeGlobalDrawersIds","onActiveGlobalDrawersChange","navigation","hasNavigation","navigationOpen","navigationFocusRef","onNavigationToggle","splitPanel","hasSplitPanel","splitPanelFocusRef","splitPanelToggleProps","onSplitPanelToggle","breadcrumbs","hasBreadcrumbsPortal","keys","filter","key","length","useMultiAppLayout","isEnabled","registration","setRegistration","forceDeduplicationType","type","discoveredProps","appLayoutWidget","register","update","registered","toolbarProps"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\app-layout\\visual-refresh-toolbar\\multi-layout.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useLayoutEffect, useState } from 'react';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nimport { RegistrationState } from '../../internal/plugins/controllers/app-layout-widget';\nimport { AppLayoutProps } from '../interfaces';\nimport { OnChangeParams } from '../utils/use-drawers';\nimport { Focusable, FocusControlMultipleStates } from '../utils/use-focus-control';\nimport { SplitPanelToggleProps, ToolbarProps } from './toolbar';\n\nexport interface SharedProps {\n  forceDeduplicationType?: 'primary' | 'secondary' | 'suspended' | 'off';\n  ariaLabels: AppLayoutProps.Labels | undefined;\n  navigation: React.ReactNode;\n  navigationOpen: boolean;\n  onNavigationToggle: (open: boolean) => void;\n  navigationFocusRef: React.Ref<Focusable> | undefined;\n  breadcrumbs: React.ReactNode;\n  activeDrawerId: string | null;\n  drawers: ReadonlyArray<AppLayoutProps.Drawer> | undefined;\n  onActiveDrawerChange: ((drawerId: string | null, params: OnChangeParams) => void) | undefined;\n  drawersFocusRef: React.Ref<Focusable> | undefined;\n  globalDrawersFocusControl?: FocusControlMultipleStates | undefined;\n  globalDrawers?: ReadonlyArray<AppLayoutProps.Drawer> | undefined;\n  activeGlobalDrawersIds?: Array<string> | undefined;\n  onActiveGlobalDrawersChange?: ((newDrawerId: string, params: OnChangeParams) => void) | undefined;\n  splitPanel: React.ReactNode;\n  splitPanelToggleProps: SplitPanelToggleProps;\n  splitPanelFocusRef: React.Ref<Focusable> | undefined;\n  onSplitPanelToggle: () => void;\n}\n\nfunction checkAlreadyExists(value: boolean, propName: string) {\n  if (value) {\n    warnOnce(\n      'AppLayout',\n      `Another app layout instance on this page already defines ${propName} property. This instance will be ignored.`\n    );\n    return true;\n  }\n  return false;\n}\n\nexport function mergeProps(\n  ownProps: SharedProps,\n  additionalProps: ReadonlyArray<Partial<SharedProps>>\n): ToolbarProps | null {\n  const toolbar: ToolbarProps = {};\n  for (const props of [ownProps, ...additionalProps]) {\n    toolbar.ariaLabels = Object.assign(toolbar.ariaLabels ?? {}, props.ariaLabels);\n    if (props.drawers && !checkAlreadyExists(!!toolbar.drawers, 'tools or drawers')) {\n      toolbar.drawers = props.drawers;\n      toolbar.activeDrawerId = props.activeDrawerId;\n      toolbar.drawersFocusRef = props.drawersFocusRef;\n      toolbar.onActiveDrawerChange = props.onActiveDrawerChange;\n    }\n    if (props.globalDrawers && !checkAlreadyExists(!!toolbar.globalDrawers, 'globalDrawers')) {\n      toolbar.globalDrawersFocusControl = props.globalDrawersFocusControl;\n      toolbar.globalDrawers = props.globalDrawers;\n      toolbar.activeGlobalDrawersIds = props.activeGlobalDrawersIds;\n      toolbar.onActiveGlobalDrawersChange = props.onActiveGlobalDrawersChange;\n    }\n    if (props.navigation && !checkAlreadyExists(!!toolbar.hasNavigation, 'navigation')) {\n      // there is never a case where navigation will exist and a toggle will not so toolbar\n      // can use the hasNavigation here to conditionally render the navigationToggle button\n      toolbar.hasNavigation = true;\n      toolbar.navigationOpen = props.navigationOpen;\n      toolbar.navigationFocusRef = props.navigationFocusRef;\n      toolbar.onNavigationToggle = props.onNavigationToggle;\n    }\n    if (props.splitPanel && !checkAlreadyExists(!!toolbar.hasSplitPanel, 'splitPanel')) {\n      toolbar.hasSplitPanel = true;\n      toolbar.splitPanelFocusRef = props.splitPanelFocusRef;\n      toolbar.splitPanelToggleProps = props.splitPanelToggleProps;\n      toolbar.onSplitPanelToggle = props.onSplitPanelToggle;\n    }\n    if (props.breadcrumbs && !checkAlreadyExists(!!toolbar.hasBreadcrumbsPortal, 'hasBreadcrumbsPortal')) {\n      toolbar.hasBreadcrumbsPortal = true;\n    }\n  }\n  // do not render toolbar if no fields are defined, except ariaLabels, which are always there\n  return Object.keys(toolbar).filter(key => key !== 'ariaLabels').length > 0 ? toolbar : null;\n}\n\nexport function useMultiAppLayout(props: SharedProps, isEnabled: boolean) {\n  const [registration, setRegistration] = useState<RegistrationState<SharedProps> | null>(null);\n  const { forceDeduplicationType } = props;\n\n  useLayoutEffect(() => {\n    if (!isEnabled || forceDeduplicationType === 'suspended') {\n      return;\n    }\n    if (forceDeduplicationType === 'off') {\n      setRegistration({ type: 'primary', discoveredProps: [] });\n      return;\n    }\n    return awsuiPluginsInternal.appLayoutWidget.register(forceDeduplicationType, props =>\n      setRegistration(props as RegistrationState<SharedProps>)\n    );\n  }, [forceDeduplicationType, isEnabled]);\n\n  useLayoutEffect(() => {\n    if (registration?.type === 'secondary') {\n      registration.update(props);\n    }\n  });\n\n  return {\n    registered: !!registration?.type,\n    toolbarProps: registration?.type === 'primary' ? mergeProps(props, registration.discoveredProps) : null,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}