{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { addDays, addWeeks, getDaysInMonth, isAfter, isBefore, isLastDayOfMonth, isSameDay, isSameMonth, isToday } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { getDateLabel, renderDayName } from '../../../calendar/utils/intl';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only/index.js';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport { GridCell } from './grid-cell';\nimport styles from './styles.css.js';\nexport function MonthlyGrid({\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n  rangeStartDate,\n  rangeEndDate,\n  focusedDate,\n  focusedDateRef,\n  onSelectDate,\n  onGridKeyDownHandler,\n  onFocusedDateChange,\n  isDateEnabled,\n  dateDisabledReason,\n  locale,\n  startOfWeek,\n  todayAriaLabel,\n  ariaLabelledby,\n  className\n}) {\n  const baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();\n  // `baseDateTime` is used as a more stable replacement for baseDate\n  const weeks = useMemo(() => getCalendarMonth(baseDate, {\n    firstDayOfWeek: startOfWeek\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [baseDateTime, startOfWeek]);\n  const weekdays = weeks[0].map(date => date.getDay());\n  return React.createElement(\"table\", {\n    role: \"grid\",\n    \"aria-labelledby\": ariaLabelledby,\n    className: clsx(styles.grid, className)\n  }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, weekdays.map(dayIndex => React.createElement(\"th\", {\n    key: dayIndex,\n    scope: \"col\",\n    className: clsx(styles['grid-cell'], styles['day-header'])\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, renderDayName(locale, dayIndex, 'short')), React.createElement(ScreenreaderOnly, null, renderDayName(locale, dayIndex, 'long')))))), React.createElement(\"tbody\", {\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map((week, weekIndex) => {\n    return React.createElement(\"tr\", {\n      key: weekIndex,\n      className: styles.week\n    }, week.map((date, dateIndex) => {\n      const isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n      const isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n      const isSelected = isStartDate || isEndDate;\n      const isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n      const isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n      const isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n      const dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n      const inRangeStartWeek = rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n      const inRangeEndWeek = rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n      const onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameDay(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;\n      const isEnabled = !isDateEnabled || isDateEnabled(date);\n      const disabledReason = dateDisabledReason(date);\n      const isDisabledWithReason = !isEnabled && !!disabledReason;\n      const isFocusable = isFocused && (isEnabled || isDisabledWithReason);\n      const baseClasses = {\n        [styles.day]: true,\n        [styles['grid-cell']]: true,\n        [styles['in-first-row']]: weekIndex === 0,\n        [styles['in-first-column']]: dateIndex === 0\n      };\n      if (!isSameMonth(date, baseDate)) {\n        return React.createElement(\"td\", {\n          key: `${weekIndex}:${dateIndex}`,\n          ref: isFocused ? focusedDateRef : undefined,\n          className: clsx(baseClasses, {\n            [styles['in-previous-month']]: isBefore(date, baseDate),\n            [styles['last-day-of-month']]: isLastDayOfMonth(date),\n            [styles['in-next-month']]: isAfter(date, baseDate)\n          })\n        });\n      }\n      const handlers = {};\n      if (isEnabled) {\n        handlers.onClick = () => onSelectDate(date);\n        handlers.onFocus = () => onFocusedDateChange(date);\n      }\n      // Can't be focused.\n      let tabIndex = undefined;\n      if (isFocusable && (isEnabled || isDisabledWithReason)) {\n        // Next focus target.\n        tabIndex = 0;\n      } else if (isEnabled || isDisabledWithReason) {\n        // Can be focused programmatically.\n        tabIndex = -1;\n      }\n      // Screen-reader announcement for the focused day.\n      let dayAnnouncement = getDateLabel(locale, date, 'short');\n      if (isToday(date)) {\n        dayAnnouncement += '. ' + todayAriaLabel;\n      }\n      return React.createElement(GridCell, Object.assign({\n        ref: isFocused ? focusedDateRef : undefined,\n        key: `${weekIndex}:${dateIndex}`,\n        className: clsx(baseClasses, {\n          [styles['in-current-month']]: isSameMonth(date, baseDate),\n          [styles.enabled]: isEnabled,\n          [styles.selected]: isSelected,\n          [styles['start-date']]: isStartDate,\n          [styles['end-date']]: isEndDate,\n          [styles['range-start-date']]: isRangeStartDate,\n          [styles['range-end-date']]: isRangeEndDate,\n          [styles['no-range']]: isSelected && onlyOneSelected,\n          [styles['in-range']]: dateIsInRange,\n          [styles['in-range-border-block-start']]: !!inRangeStartWeek || date.getDate() <= 7,\n          [styles['in-range-border-block-end']]: !!inRangeEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n          [styles['in-range-border-inline-start']]: dateIndex === 0 || date.getDate() === 1 || isRangeStartDate,\n          [styles['in-range-border-inline-end']]: dateIndex === week.length - 1 || isLastDayOfMonth(date) || isRangeEndDate,\n          [styles.today]: isToday(date)\n        }),\n        \"aria-selected\": isEnabled ? isSelected || dateIsInRange : undefined,\n        \"aria-current\": isToday(date) ? 'date' : undefined,\n        \"data-date\": formatDate(date),\n        \"aria-disabled\": !isEnabled,\n        tabIndex: tabIndex,\n        disabledReason: isDisabledWithReason ? disabledReason : undefined\n      }, handlers), React.createElement(\"span\", {\n        className: styles['day-inner'],\n        \"aria-hidden\": \"true\"\n      }, date.getDate()), React.createElement(ScreenreaderOnly, null, dayAnnouncement));\n    }));\n  })));\n}\nfunction isInRange(date, dateOne, dateTwo) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n  const inRange = isAfter(date, dateOne) && isBefore(date, dateTwo) || isAfter(date, dateTwo) && isBefore(date, dateOne);\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}","map":{"version":3,"names":["React","useMemo","clsx","addDays","addWeeks","getDaysInMonth","isAfter","isBefore","isLastDayOfMonth","isSameDay","isSameMonth","isToday","getCalendarMonth","getDateLabel","renderDayName","ScreenreaderOnly","formatDate","GridCell","styles","MonthlyGrid","baseDate","selectedStartDate","selectedEndDate","rangeStartDate","rangeEndDate","focusedDate","focusedDateRef","onSelectDate","onGridKeyDownHandler","onFocusedDateChange","isDateEnabled","dateDisabledReason","locale","startOfWeek","todayAriaLabel","ariaLabelledby","className","baseDateTime","getTime","weeks","firstDayOfWeek","weekdays","map","date","getDay","createElement","role","grid","dayIndex","key","scope","onKeyDown","week","weekIndex","dateIndex","isStartDate","isEndDate","isSelected","isRangeStartDate","isRangeEndDate","isFocused","dateIsInRange","isInRange","inRangeStartWeek","inRangeEndWeek","onlyOneSelected","isEnabled","disabledReason","isDisabledWithReason","isFocusable","baseClasses","day","ref","undefined","handlers","onClick","onFocus","tabIndex","dayAnnouncement","Object","assign","enabled","selected","getDate","length","today","dateOne","dateTwo","inRange"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\date-range-picker\\calendar\\grids\\monthly-grid.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport {\n  addDays,\n  addWeeks,\n  getDaysInMonth,\n  isAfter,\n  isBefore,\n  isLastDayOfMonth,\n  isSameDay,\n  isSameMonth,\n  isToday,\n} from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\n\nimport { getDateLabel, renderDayName } from '../../../calendar/utils/intl';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only/index.js';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport { DateRangePickerProps, DayIndex } from '../../interfaces';\nimport { GridCell } from './grid-cell';\n\nimport styles from './styles.css.js';\n\n/**\n * Calendar grid supports two mechanisms of keyboard navigation:\n * - Native screen-reader table navigation (semantic table markup);\n * - Keyboard arrow-keys navigation (a custom key-down handler).\n *\n * The implementation largely follows the w3 example (https://www.w3.org/WAI/ARIA/apg/example-index/dialog-modal/datepicker-dialog) and shares the following issues:\n * - (table navigation) Chrome+VO - weekday is announced twice when navigating to the calendar's header;\n * - (table navigation) Safari+VO - \"dimmed\" state is announced twice;\n * - (table navigation) Firefox/Chrome+NVDA - cannot use table navigation if any cell has a focus;\n * - (keyboard navigation) Firefox+NVDA - every day is announced as \"not selected\";\n * - (keyboard navigation) Safari/Chrome+VO - weekdays are not announced;\n * - (keyboard navigation) Safari/Chrome+VO - days are not announced as interactive (clickable or selectable);\n * - (keyboard navigation) Safari/Chrome+VO - day announcements are not interruptive and can be missed if navigating fast.\n */\n\nexport interface GridProps {\n  baseDate: Date;\n  selectedStartDate: Date | null;\n  selectedEndDate: Date | null;\n\n  rangeStartDate: Date | null;\n  rangeEndDate: Date | null;\n\n  focusedDate: Date | null;\n  focusedDateRef: React.RefObject<HTMLTableCellElement>;\n\n  onSelectDate: (date: Date) => void;\n  onGridKeyDownHandler: (e: React.KeyboardEvent<HTMLElement>) => void;\n  onFocusedDateChange: React.Dispatch<React.SetStateAction<Date | null>>;\n\n  isDateEnabled: DateRangePickerProps.IsDateEnabledFunction;\n  dateDisabledReason: DateRangePickerProps.DateDisabledReasonFunction;\n\n  locale: string;\n  startOfWeek: DayIndex;\n  todayAriaLabel?: string;\n  ariaLabelledby: string;\n\n  className?: string;\n}\n\nexport function MonthlyGrid({\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n  rangeStartDate,\n  rangeEndDate,\n  focusedDate,\n\n  focusedDateRef,\n\n  onSelectDate,\n  onGridKeyDownHandler,\n  onFocusedDateChange,\n\n  isDateEnabled,\n  dateDisabledReason,\n\n  locale,\n  startOfWeek,\n  todayAriaLabel,\n  ariaLabelledby,\n\n  className,\n}: GridProps) {\n  const baseDateTime = baseDate?.getTime();\n  // `baseDateTime` is used as a more stable replacement for baseDate\n  const weeks = useMemo<Date[][]>(\n    () => getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [baseDateTime, startOfWeek]\n  );\n  const weekdays = weeks[0].map(date => date.getDay());\n\n  return (\n    <table role=\"grid\" aria-labelledby={ariaLabelledby} className={clsx(styles.grid, className)}>\n      <thead>\n        <tr>\n          {weekdays.map(dayIndex => (\n            <th key={dayIndex} scope=\"col\" className={clsx(styles['grid-cell'], styles['day-header'])}>\n              <span aria-hidden=\"true\">{renderDayName(locale, dayIndex, 'short')}</span>\n              <ScreenreaderOnly>{renderDayName(locale, dayIndex, 'long')}</ScreenreaderOnly>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody onKeyDown={onGridKeyDownHandler}>\n        {weeks.map((week, weekIndex) => {\n          return (\n            <tr key={weekIndex} className={styles.week}>\n              {week.map((date, dateIndex) => {\n                const isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n                const isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n                const isSelected = isStartDate || isEndDate;\n                const isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n                const isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n\n                const isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n\n                const dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n                const inRangeStartWeek =\n                  rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n                const inRangeEndWeek =\n                  rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n                const onlyOneSelected =\n                  !!rangeStartDate && !!rangeEndDate\n                    ? isSameDay(rangeStartDate, rangeEndDate)\n                    : !selectedStartDate || !selectedEndDate;\n\n                const isEnabled = !isDateEnabled || isDateEnabled(date);\n                const disabledReason = dateDisabledReason(date);\n                const isDisabledWithReason = !isEnabled && !!disabledReason;\n                const isFocusable = isFocused && (isEnabled || isDisabledWithReason);\n\n                const baseClasses = {\n                  [styles.day]: true,\n                  [styles['grid-cell']]: true,\n                  [styles['in-first-row']]: weekIndex === 0,\n                  [styles['in-first-column']]: dateIndex === 0,\n                };\n\n                if (!isSameMonth(date, baseDate)) {\n                  return (\n                    <td\n                      key={`${weekIndex}:${dateIndex}`}\n                      ref={isFocused ? focusedDateRef : undefined}\n                      className={clsx(baseClasses, {\n                        [styles['in-previous-month']]: isBefore(date, baseDate),\n                        [styles['last-day-of-month']]: isLastDayOfMonth(date),\n                        [styles['in-next-month']]: isAfter(date, baseDate),\n                      })}\n                    ></td>\n                  );\n                }\n\n                const handlers: React.HTMLAttributes<HTMLDivElement> = {};\n                if (isEnabled) {\n                  handlers.onClick = () => onSelectDate(date);\n                  handlers.onFocus = () => onFocusedDateChange(date);\n                }\n\n                // Can't be focused.\n                let tabIndex = undefined;\n                if (isFocusable && (isEnabled || isDisabledWithReason)) {\n                  // Next focus target.\n                  tabIndex = 0;\n                } else if (isEnabled || isDisabledWithReason) {\n                  // Can be focused programmatically.\n                  tabIndex = -1;\n                }\n\n                // Screen-reader announcement for the focused day.\n                let dayAnnouncement = getDateLabel(locale, date, 'short');\n                if (isToday(date)) {\n                  dayAnnouncement += '. ' + todayAriaLabel;\n                }\n\n                return (\n                  <GridCell\n                    ref={isFocused ? focusedDateRef : undefined}\n                    key={`${weekIndex}:${dateIndex}`}\n                    className={clsx(baseClasses, {\n                      [styles['in-current-month']]: isSameMonth(date, baseDate),\n                      [styles.enabled]: isEnabled,\n                      [styles.selected]: isSelected,\n                      [styles['start-date']]: isStartDate,\n                      [styles['end-date']]: isEndDate,\n                      [styles['range-start-date']]: isRangeStartDate,\n                      [styles['range-end-date']]: isRangeEndDate,\n                      [styles['no-range']]: isSelected && onlyOneSelected,\n                      [styles['in-range']]: dateIsInRange,\n                      [styles['in-range-border-block-start']]: !!inRangeStartWeek || date.getDate() <= 7,\n                      [styles['in-range-border-block-end']]:\n                        !!inRangeEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n                      [styles['in-range-border-inline-start']]:\n                        dateIndex === 0 || date.getDate() === 1 || isRangeStartDate,\n                      [styles['in-range-border-inline-end']]:\n                        dateIndex === week.length - 1 || isLastDayOfMonth(date) || isRangeEndDate,\n                      [styles.today]: isToday(date),\n                    })}\n                    aria-selected={isEnabled ? isSelected || dateIsInRange : undefined}\n                    aria-current={isToday(date) ? 'date' : undefined}\n                    data-date={formatDate(date)}\n                    aria-disabled={!isEnabled}\n                    tabIndex={tabIndex}\n                    disabledReason={isDisabledWithReason ? disabledReason : undefined}\n                    {...handlers}\n                  >\n                    <span className={styles['day-inner']} aria-hidden=\"true\">\n                      {date.getDate()}\n                    </span>\n                    <ScreenreaderOnly>{dayAnnouncement}</ScreenreaderOnly>\n                  </GridCell>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nfunction isInRange(date: Date, dateOne: Date | null, dateTwo: Date | null) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n\n  const inRange =\n    (isAfter(date, dateOne) && isBefore(date, dateTwo)) || (isAfter(date, dateTwo) && isBefore(date, dateOne));\n\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}