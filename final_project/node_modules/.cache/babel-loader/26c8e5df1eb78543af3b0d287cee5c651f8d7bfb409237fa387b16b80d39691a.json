{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { TableTdElement } from '../body-cell/td-element';\nimport { TableThElement } from '../header-cell/th-element';\nimport { Divider } from '../resizer';\nimport { SelectionControl } from './selection-control';\nimport styles from '../styles.css.js';\nexport function TableHeaderSelectionCell(_a) {\n  var {\n      focusedComponent,\n      singleSelectionHeaderAriaLabel,\n      getSelectAllProps,\n      onFocusMove\n    } = _a,\n    props = __rest(_a, [\"focusedComponent\", \"singleSelectionHeaderAriaLabel\", \"getSelectAllProps\", \"onFocusMove\"]);\n  return React.createElement(TableThElement, Object.assign({}, props, {\n    isSelection: true,\n    colIndex: 0,\n    focusedComponent: focusedComponent\n  }), getSelectAllProps ? React.createElement(SelectionControl, Object.assign({\n    onFocusDown: event => {\n      onFocusMove(event.target, -1, +1);\n    },\n    focusedComponent: focusedComponent\n  }, getSelectAllProps(), props.sticky ? {\n    tabIndex: -1\n  } : {})) : React.createElement(ScreenreaderOnly, null, singleSelectionHeaderAriaLabel), React.createElement(Divider, {\n    className: styles['resize-divider']\n  }));\n}\nexport function TableBodySelectionCell(_a) {\n  var {\n      selectionControlProps\n    } = _a,\n    props = __rest(_a, [\"selectionControlProps\"]);\n  return React.createElement(TableTdElement, Object.assign({}, props, {\n    isSelection: true,\n    wrapLines: false,\n    isEditable: false,\n    isEditing: false,\n    colIndex: 0\n  }), selectionControlProps ? React.createElement(SelectionControl, Object.assign({}, selectionControlProps)) : null);\n}","map":{"version":3,"names":["React","ScreenreaderOnly","TableTdElement","TableThElement","Divider","SelectionControl","styles","TableHeaderSelectionCell","_a","focusedComponent","singleSelectionHeaderAriaLabel","getSelectAllProps","onFocusMove","props","__rest","createElement","Object","assign","isSelection","colIndex","onFocusDown","event","target","sticky","tabIndex","className","TableBodySelectionCell","selectionControlProps","wrapLines","isEditable","isEditing"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\table\\selection\\selection-cell.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { TableTdElement, TableTdElementProps } from '../body-cell/td-element';\nimport { TableThElement, TableThElementProps } from '../header-cell/th-element';\nimport { Divider } from '../resizer';\nimport { SelectionProps } from './interfaces';\nimport { SelectionControl, SelectionControlProps } from './selection-control';\n\nimport styles from '../styles.css.js';\n\ninterface TableHeaderSelectionCellProps extends Omit<TableThElementProps, 'children' | 'colIndex'> {\n  focusedComponent?: null | string;\n  singleSelectionHeaderAriaLabel?: string;\n  getSelectAllProps?: () => SelectionProps;\n  onFocusMove: ((sourceElement: HTMLElement, fromIndex: number, direction: -1 | 1) => void) | undefined;\n}\n\ninterface TableBodySelectionCellProps\n  extends Omit<TableTdElementProps, 'children' | 'colIndex' | 'wrapLines' | 'isEditable' | 'isEditing'> {\n  selectionControlProps?: SelectionControlProps;\n}\n\nexport function TableHeaderSelectionCell({\n  focusedComponent,\n  singleSelectionHeaderAriaLabel,\n  getSelectAllProps,\n  onFocusMove,\n  ...props\n}: TableHeaderSelectionCellProps) {\n  return (\n    <TableThElement {...props} isSelection={true} colIndex={0} focusedComponent={focusedComponent}>\n      {getSelectAllProps ? (\n        <SelectionControl\n          onFocusDown={event => {\n            onFocusMove!(event.target as HTMLElement, -1, +1);\n          }}\n          focusedComponent={focusedComponent}\n          {...getSelectAllProps()}\n          {...(props.sticky ? { tabIndex: -1 } : {})}\n        />\n      ) : (\n        <ScreenreaderOnly>{singleSelectionHeaderAriaLabel}</ScreenreaderOnly>\n      )}\n      <Divider className={styles['resize-divider']} />\n    </TableThElement>\n  );\n}\n\nexport function TableBodySelectionCell({ selectionControlProps, ...props }: TableBodySelectionCellProps) {\n  return (\n    <TableTdElement {...props} isSelection={true} wrapLines={false} isEditable={false} isEditing={false} colIndex={0}>\n      {selectionControlProps ? <SelectionControl {...selectionControlProps} /> : null}\n    </TableTdElement>\n  );\n}\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,gBAAgB,MAAM,6CAA6C;AAC1E,SAASC,cAAc,QAA6B,yBAAyB;AAC7E,SAASC,cAAc,QAA6B,2BAA2B;AAC/E,SAASC,OAAO,QAAQ,YAAY;AAEpC,SAASC,gBAAgB,QAA+B,qBAAqB;AAE7E,OAAOC,MAAM,MAAM,kBAAkB;AAcrC,OAAM,SAAUC,wBAAwBA,CAACC,EAMT;MANS;MACvCC,gBAAgB;MAChBC,8BAA8B;MAC9BC,iBAAiB;MACjBC;IAAW,IAAAJ,EAEmB;IAD3BK,KAAK,GAAAC,MAAA,CAAAN,EAAA,EAL+B,0FAMxC,CADS;EAER,OACER,KAAA,CAAAe,aAAA,CAACZ,cAAc,EAAAa,MAAA,CAAAC,MAAA,KAAKJ,KAAK;IAAEK,WAAW,EAAE,IAAI;IAAEC,QAAQ,EAAE,CAAC;IAAEV,gBAAgB,EAAEA;EAAgB,IAC1FE,iBAAiB,GAChBX,KAAA,CAAAe,aAAA,CAACV,gBAAgB,EAAAW,MAAA,CAAAC,MAAA;IACfG,WAAW,EAAEC,KAAK,IAAG;MACnBT,WAAY,CAACS,KAAK,CAACC,MAAqB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;IACDb,gBAAgB,EAAEA;EAAgB,GAC9BE,iBAAiB,EAAE,EAClBE,KAAK,CAACU,MAAM,GAAG;IAAEC,QAAQ,EAAE,CAAC;EAAC,CAAE,GAAG,EAAG,EAC1C,GAEFxB,KAAA,CAAAe,aAAA,CAACd,gBAAgB,QAAES,8BAA8B,CAClD,EACDV,KAAA,CAAAe,aAAA,CAACX,OAAO;IAACqB,SAAS,EAAEnB,MAAM,CAAC,gBAAgB;EAAC,EAAI,CACjC;AAErB;AAEA,OAAM,SAAUoB,sBAAsBA,CAAClB,EAAgE;MAAhE;MAAEmB;IAAqB,IAAAnB,EAAyC;IAApCK,KAAK,GAAAC,MAAA,CAAAN,EAAA,EAAjC,yBAAmC,CAAF;EACtE,OACER,KAAA,CAAAe,aAAA,CAACb,cAAc,EAAAc,MAAA,CAAAC,MAAA,KAAKJ,KAAK;IAAEK,WAAW,EAAE,IAAI;IAAEU,SAAS,EAAE,KAAK;IAAEC,UAAU,EAAE,KAAK;IAAEC,SAAS,EAAE,KAAK;IAAEX,QAAQ,EAAE;EAAC,IAC7GQ,qBAAqB,GAAG3B,KAAA,CAAAe,aAAA,CAACV,gBAAgB,EAAAW,MAAA,CAAAC,MAAA,KAAKU,qBAAqB,EAAI,GAAG,IAAI,CAChE;AAErB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}