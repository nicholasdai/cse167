{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\nimport { ComponentMetrics, PerformanceMetrics } from '../../analytics';\nimport { useFunnel } from '../../analytics/hooks/use-funnel';\nimport { useDOMAttribute } from '../use-dom-attribute';\nimport { useEffectOnUpdate } from '../use-effect-on-update';\nimport { useRandomId } from '../use-unique-id';\n/*\nIf the last user interaction is more than this time ago, it is not considered\nto be the cause of the current loading state.\n*/\nconst USER_ACTION_TIME_LIMIT = 1000;\nexport function useTableInteractionMetrics({\n  elementRef,\n  itemCount,\n  instanceIdentifier,\n  getComponentIdentifier,\n  getComponentConfiguration,\n  loading = false,\n  interactionMetadata\n}) {\n  const taskInteractionId = useRandomId();\n  const tableInteractionAttributes = useDOMAttribute(elementRef, 'data-analytics-task-interaction-id', taskInteractionId);\n  const {\n    isInFunnel\n  } = useFunnel();\n  const lastUserAction = useRef(null);\n  const capturedUserAction = useRef(null);\n  const loadingStartTime = useRef(null);\n  const metadata = useRef({\n    itemCount,\n    getComponentIdentifier,\n    getComponentConfiguration,\n    interactionMetadata\n  });\n  metadata.current = {\n    itemCount,\n    getComponentIdentifier,\n    getComponentConfiguration,\n    interactionMetadata\n  };\n  useEffect(() => {\n    if (isInFunnel) {\n      return;\n    }\n    ComponentMetrics.componentMounted({\n      taskInteractionId,\n      componentName: 'table',\n      componentConfiguration: metadata.current.getComponentConfiguration()\n    });\n  }, [taskInteractionId, isInFunnel]);\n  useEffect(() => {\n    if (loading) {\n      loadingStartTime.current = performance.now();\n      if (lastUserAction.current && lastUserAction.current.time > performance.now() - USER_ACTION_TIME_LIMIT) {\n        capturedUserAction.current = lastUserAction.current.name;\n      } else {\n        capturedUserAction.current = null;\n      }\n    }\n  }, [loading]);\n  useEffectOnUpdate(() => {\n    var _a, _b;\n    if (!loading && loadingStartTime.current !== null) {\n      const loadingDuration = performance.now() - loadingStartTime.current;\n      loadingStartTime.current = null;\n      PerformanceMetrics.tableInteraction({\n        userAction: (_a = capturedUserAction.current) !== null && _a !== void 0 ? _a : '',\n        interactionTime: Math.round(loadingDuration),\n        interactionMetadata: metadata.current.interactionMetadata(),\n        componentIdentifier: metadata.current.getComponentIdentifier(),\n        instanceIdentifier,\n        noOfResourcesInTable: metadata.current.itemCount\n      });\n      if (!isInFunnel) {\n        ComponentMetrics.componentUpdated({\n          taskInteractionId,\n          componentName: 'table',\n          actionType: (_b = capturedUserAction.current) !== null && _b !== void 0 ? _b : '',\n          componentConfiguration: metadata.current.getComponentConfiguration()\n        });\n      }\n    }\n  }, [instanceIdentifier, loading, taskInteractionId, isInFunnel]);\n  return {\n    tableInteractionAttributes,\n    setLastUserAction: name => void (lastUserAction.current = {\n      name,\n      time: performance.now()\n    })\n  };\n}","map":{"version":3,"names":["useEffect","useRef","ComponentMetrics","PerformanceMetrics","useFunnel","useDOMAttribute","useEffectOnUpdate","useRandomId","USER_ACTION_TIME_LIMIT","useTableInteractionMetrics","elementRef","itemCount","instanceIdentifier","getComponentIdentifier","getComponentConfiguration","loading","interactionMetadata","taskInteractionId","tableInteractionAttributes","isInFunnel","lastUserAction","capturedUserAction","loadingStartTime","metadata","current","componentMounted","componentName","componentConfiguration","performance","now","time","name","loadingDuration","tableInteraction","userAction","_a","interactionTime","Math","round","componentIdentifier","noOfResourcesInTable","componentUpdated","actionType","_b","setLastUserAction"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\internal\\hooks\\use-table-interaction-metrics\\index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useEffect, useRef } from 'react';\n\nimport { ComponentMetrics, PerformanceMetrics } from '../../analytics';\nimport { useFunnel } from '../../analytics/hooks/use-funnel';\nimport { JSONObject } from '../../analytics/interfaces';\nimport { useDOMAttribute } from '../use-dom-attribute';\nimport { useEffectOnUpdate } from '../use-effect-on-update';\nimport { useRandomId } from '../use-unique-id';\n\n/*\nIf the last user interaction is more than this time ago, it is not considered\nto be the cause of the current loading state.\n*/\nconst USER_ACTION_TIME_LIMIT = 1_000;\n\nexport interface UseTableInteractionMetricsProps {\n  elementRef: React.RefObject<HTMLElement>;\n  instanceIdentifier: string | undefined;\n  loading: boolean | undefined;\n  itemCount: number;\n  getComponentIdentifier: () => string | undefined;\n  getComponentConfiguration: () => JSONObject;\n  interactionMetadata: () => string;\n}\n\nexport function useTableInteractionMetrics({\n  elementRef,\n  itemCount,\n  instanceIdentifier,\n  getComponentIdentifier,\n  getComponentConfiguration,\n  loading = false,\n  interactionMetadata,\n}: UseTableInteractionMetricsProps) {\n  const taskInteractionId = useRandomId();\n  const tableInteractionAttributes = useDOMAttribute(\n    elementRef,\n    'data-analytics-task-interaction-id',\n    taskInteractionId\n  );\n  const { isInFunnel } = useFunnel();\n  const lastUserAction = useRef<{ name: string; time: number } | null>(null);\n  const capturedUserAction = useRef<string | null>(null);\n  const loadingStartTime = useRef<number | null>(null);\n\n  const metadata = useRef({ itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata });\n  metadata.current = { itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata };\n\n  useEffect(() => {\n    if (isInFunnel) {\n      return;\n    }\n\n    ComponentMetrics.componentMounted({\n      taskInteractionId,\n      componentName: 'table',\n      componentConfiguration: metadata.current.getComponentConfiguration(),\n    });\n  }, [taskInteractionId, isInFunnel]);\n\n  useEffect(() => {\n    if (loading) {\n      loadingStartTime.current = performance.now();\n\n      if (lastUserAction.current && lastUserAction.current.time > performance.now() - USER_ACTION_TIME_LIMIT) {\n        capturedUserAction.current = lastUserAction.current.name;\n      } else {\n        capturedUserAction.current = null;\n      }\n    }\n  }, [loading]);\n\n  useEffectOnUpdate(() => {\n    if (!loading && loadingStartTime.current !== null) {\n      const loadingDuration = performance.now() - loadingStartTime.current;\n      loadingStartTime.current = null;\n\n      PerformanceMetrics.tableInteraction({\n        userAction: capturedUserAction.current ?? '',\n        interactionTime: Math.round(loadingDuration),\n        interactionMetadata: metadata.current.interactionMetadata(),\n        componentIdentifier: metadata.current.getComponentIdentifier(),\n        instanceIdentifier,\n        noOfResourcesInTable: metadata.current.itemCount,\n      });\n\n      if (!isInFunnel) {\n        ComponentMetrics.componentUpdated({\n          taskInteractionId,\n          componentName: 'table',\n          actionType: capturedUserAction.current ?? '',\n          componentConfiguration: metadata.current.getComponentConfiguration(),\n        });\n      }\n    }\n  }, [instanceIdentifier, loading, taskInteractionId, isInFunnel]);\n\n  return {\n    tableInteractionAttributes,\n    setLastUserAction: (name: string) => void (lastUserAction.current = { name, time: performance.now() }),\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}