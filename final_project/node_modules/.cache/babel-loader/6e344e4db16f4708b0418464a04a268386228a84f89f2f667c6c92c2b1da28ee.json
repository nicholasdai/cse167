{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\n/**\n * The controller that manages a single live region container. It has a timer\n * to make sure announcements are throttled correctly. It can also make sure\n * that a message is announced again even if it matches the previous content\n * of the live region.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n */\nexport class LiveRegionController {\n  constructor(politeness, delay = LiveRegionController.defaultDelay) {\n    this.politeness = politeness;\n    this.delay = delay;\n    this._addedTerminalPeriod = false;\n    this._nextAnnouncement = '';\n    this._element = document.createElement('div');\n    this._element.className = `${styles.announcer} ${testUtilStyles.announcer}`;\n    this._element.setAttribute('aria-live', this.politeness);\n    this._element.setAttribute('aria-atomic', 'true');\n    document.body.appendChild(this._element);\n  }\n  /**\n   * Reset the state of the controller and clear any active announcements.\n   */\n  destroy() {\n    var _a;\n    (_a = this._element) === null || _a === void 0 ? void 0 : _a.remove();\n    if (this._timeoutId !== undefined) {\n      clearTimeout(this._timeoutId);\n      this._timeoutId = undefined;\n    }\n  }\n  announce({\n    message,\n    forceReannounce = false\n  }) {\n    if (!message) {\n      return;\n    }\n    this._nextAnnouncement = message.trim();\n    if (this.delay === 0 || forceReannounce) {\n      // If the delay is 0, just skip the timeout shenanigans and update the\n      // element synchronously. Great for tests.\n      return this._updateElement(forceReannounce);\n    }\n    if (this._timeoutId === undefined) {\n      this._timeoutId = setTimeout(() => this._updateElement(false), this.delay * 1000);\n    }\n  }\n  _updateElement(forceReannounce) {\n    if (this._nextAnnouncement !== this._lastAnnouncement) {\n      // The aria-atomic does not work properly in Voice Over, causing\n      // certain parts of the content to be ignored. To fix that,\n      // we assign the source text content as a single node.\n      this._element.textContent = this._nextAnnouncement;\n      this._addedTerminalPeriod = false;\n    } else if (forceReannounce) {\n      // A (generally) safe way of forcing re-announcements is toggling the\n      // terminal period. If we only keep adding periods, it's going to be\n      // eventually interpreted as an ellipsis.\n      this._element.textContent = this._nextAnnouncement + (this._addedTerminalPeriod ? '' : '.');\n      this._addedTerminalPeriod = !this._addedTerminalPeriod;\n    }\n    // Track the announced text for deduplication.\n    this._lastAnnouncement = this._nextAnnouncement;\n    // Reset the state for the next announcement.\n    this._timeoutId = undefined;\n  }\n}\n/**\n * The default delay for announcements when no delay is explicitly provided.\n * During internal unit testing, you can import this and explicitly set it to\n * 0 to make the live region update the DOM without waiting for a timer.\n */\nLiveRegionController.defaultDelay = 2;","map":{"version":3,"names":["styles","testUtilStyles","LiveRegionController","constructor","politeness","delay","defaultDelay","_addedTerminalPeriod","_nextAnnouncement","_element","document","createElement","className","announcer","setAttribute","body","appendChild","destroy","_a","remove","_timeoutId","undefined","clearTimeout","announce","message","forceReannounce","trim","_updateElement","setTimeout","_lastAnnouncement","textContent"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\live-region\\controller.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\n\n/**\n * The controller that manages a single live region container. It has a timer\n * to make sure announcements are throttled correctly. It can also make sure\n * that a message is announced again even if it matches the previous content\n * of the live region.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n */\nexport class LiveRegionController {\n  /**\n   * The default delay for announcements when no delay is explicitly provided.\n   * During internal unit testing, you can import this and explicitly set it to\n   * 0 to make the live region update the DOM without waiting for a timer.\n   */\n  public static defaultDelay = 2;\n\n  private _element: HTMLElement;\n  private _timeoutId: number | undefined;\n  private _lastAnnouncement: string | undefined;\n  private _addedTerminalPeriod = false;\n  private _nextAnnouncement = '';\n\n  constructor(\n    public readonly politeness: 'polite' | 'assertive',\n    public readonly delay = LiveRegionController.defaultDelay\n  ) {\n    this._element = document.createElement('div');\n    this._element.className = `${styles.announcer} ${testUtilStyles.announcer}`;\n    this._element.setAttribute('aria-live', this.politeness);\n    this._element.setAttribute('aria-atomic', 'true');\n    document.body.appendChild(this._element);\n  }\n\n  /**\n   * Reset the state of the controller and clear any active announcements.\n   */\n  destroy() {\n    this._element?.remove();\n    if (this._timeoutId !== undefined) {\n      clearTimeout(this._timeoutId);\n      this._timeoutId = undefined;\n    }\n  }\n\n  announce({ message, forceReannounce = false }: { message?: string; delay?: number; forceReannounce?: boolean }) {\n    if (!message) {\n      return;\n    }\n\n    this._nextAnnouncement = message.trim();\n\n    if (this.delay === 0 || forceReannounce) {\n      // If the delay is 0, just skip the timeout shenanigans and update the\n      // element synchronously. Great for tests.\n      return this._updateElement(forceReannounce);\n    }\n\n    if (this._timeoutId === undefined) {\n      this._timeoutId = setTimeout(() => this._updateElement(false), this.delay * 1000);\n    }\n  }\n\n  private _updateElement(forceReannounce: boolean) {\n    if (this._nextAnnouncement !== this._lastAnnouncement) {\n      // The aria-atomic does not work properly in Voice Over, causing\n      // certain parts of the content to be ignored. To fix that,\n      // we assign the source text content as a single node.\n      this._element.textContent = this._nextAnnouncement;\n      this._addedTerminalPeriod = false;\n    } else if (forceReannounce) {\n      // A (generally) safe way of forcing re-announcements is toggling the\n      // terminal period. If we only keep adding periods, it's going to be\n      // eventually interpreted as an ellipsis.\n      this._element.textContent = this._nextAnnouncement + (this._addedTerminalPeriod ? '' : '.');\n      this._addedTerminalPeriod = !this._addedTerminalPeriod;\n    }\n\n    // Track the announced text for deduplication.\n    this._lastAnnouncement = this._nextAnnouncement;\n\n    // Reset the state for the next announcement.\n    this._timeoutId = undefined;\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,OAAOA,MAAM,MAAM,iBAAiB;AACpC,OAAOC,cAAc,MAAM,8BAA8B;AAEzD;;;;;;;;AAQA,OAAM,MAAOC,oBAAoB;EAc/BC,YACkBC,UAAkC,EAClCC,KAAA,GAAQH,oBAAoB,CAACI,YAAY;IADzC,KAAAF,UAAU,GAAVA,UAAU;IACV,KAAAC,KAAK,GAALA,KAAK;IALf,KAAAE,oBAAoB,GAAG,KAAK;IAC5B,KAAAC,iBAAiB,GAAG,EAAE;IAM5B,IAAI,CAACC,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC7C,IAAI,CAACF,QAAQ,CAACG,SAAS,GAAG,GAAGZ,MAAM,CAACa,SAAS,IAAIZ,cAAc,CAACY,SAAS,EAAE;IAC3E,IAAI,CAACJ,QAAQ,CAACK,YAAY,CAAC,WAAW,EAAE,IAAI,CAACV,UAAU,CAAC;IACxD,IAAI,CAACK,QAAQ,CAACK,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;IACjDJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAAC,IAAI,CAACP,QAAQ,CAAC;EAC1C;EAEA;;;EAGAQ,OAAOA,CAAA;;IACL,CAAAC,EAAA,OAAI,CAACT,QAAQ,cAAAS,EAAA,uBAAAA,EAAA,CAAEC,MAAM,EAAE;IACvB,IAAI,IAAI,CAACC,UAAU,KAAKC,SAAS,EAAE;MACjCC,YAAY,CAAC,IAAI,CAACF,UAAU,CAAC;MAC7B,IAAI,CAACA,UAAU,GAAGC,SAAS;;EAE/B;EAEAE,QAAQA,CAAC;IAAEC,OAAO;IAAEC,eAAe,GAAG;EAAK,CAAmE;IAC5G,IAAI,CAACD,OAAO,EAAE;MACZ;;IAGF,IAAI,CAAChB,iBAAiB,GAAGgB,OAAO,CAACE,IAAI,EAAE;IAEvC,IAAI,IAAI,CAACrB,KAAK,KAAK,CAAC,IAAIoB,eAAe,EAAE;MACvC;MACA;MACA,OAAO,IAAI,CAACE,cAAc,CAACF,eAAe,CAAC;;IAG7C,IAAI,IAAI,CAACL,UAAU,KAAKC,SAAS,EAAE;MACjC,IAAI,CAACD,UAAU,GAAGQ,UAAU,CAAC,MAAM,IAAI,CAACD,cAAc,CAAC,KAAK,CAAC,EAAE,IAAI,CAACtB,KAAK,GAAG,IAAI,CAAC;;EAErF;EAEQsB,cAAcA,CAACF,eAAwB;IAC7C,IAAI,IAAI,CAACjB,iBAAiB,KAAK,IAAI,CAACqB,iBAAiB,EAAE;MACrD;MACA;MACA;MACA,IAAI,CAACpB,QAAQ,CAACqB,WAAW,GAAG,IAAI,CAACtB,iBAAiB;MAClD,IAAI,CAACD,oBAAoB,GAAG,KAAK;KAClC,MAAM,IAAIkB,eAAe,EAAE;MAC1B;MACA;MACA;MACA,IAAI,CAAChB,QAAQ,CAACqB,WAAW,GAAG,IAAI,CAACtB,iBAAiB,IAAI,IAAI,CAACD,oBAAoB,GAAG,EAAE,GAAG,GAAG,CAAC;MAC3F,IAAI,CAACA,oBAAoB,GAAG,CAAC,IAAI,CAACA,oBAAoB;;IAGxD;IACA,IAAI,CAACsB,iBAAiB,GAAG,IAAI,CAACrB,iBAAiB;IAE/C;IACA,IAAI,CAACY,UAAU,GAAGC,SAAS;EAC7B;;AAzEA;;;;;AAKcnB,oBAAA,CAAAI,YAAY,GAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}