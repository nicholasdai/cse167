{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useInternalI18n } from '../../i18n/context';\nimport Icon from '../../icon/internal';\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context.js';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport InternalLiveRegion from '../../live-region/internal';\nimport { DisabledInlineEditor } from './disabled-inline-editor';\nimport { InlineEditor } from './inline-editor';\nimport { TableTdElement } from './td-element';\nimport styles from './styles.css.js';\nconst submitHandlerFallback = () => {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\nfunction TableCellEditable(_a) {\n  var _b, _c, _d;\n  var {\n      item,\n      column,\n      isEditing,\n      onEditStart,\n      onEditEnd,\n      submitEdit,\n      ariaLabels,\n      successfulEdit = false\n    } = _a,\n    rest = __rest(_a, [\"item\", \"column\", \"isEditing\", \"onEditStart\", \"onEditEnd\", \"submitEdit\", \"ariaLabels\", \"successfulEdit\"]);\n  const i18n = useInternalI18n('table');\n  const editActivateRef = useRef(null);\n  const tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString()\n  };\n  const isFocusMoveNeededRef = useRef(false);\n  useEffect(() => {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  const [hasHover, setHasHover] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  // When a cell is both expandable and editable the icon is always shown.\n  const showIcon = hasHover || hasFocus;\n  const prevSuccessfulEdit = usePrevious(successfulEdit);\n  const prevHasFocus = usePrevious(hasFocus);\n  const [showSuccessIcon, setShowSuccessIcon] = useState(false);\n  useEffect(() => {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n  const {\n    tabIndex: editActivateTabIndex\n  } = useSingleTabStopNavigation(editActivateRef);\n  return React.createElement(TableTdElement, Object.assign({}, rest, {\n    nativeAttributes: tdNativeAttributes,\n    isEditing: isEditing,\n    hasSuccessIcon: showSuccessIcon && showIcon,\n    onClick: !isEditing ? onEditStart : undefined,\n    onMouseEnter: () => setHasHover(true),\n    onMouseLeave: () => setHasHover(false)\n  }), isEditing ? React.createElement(InlineEditor, {\n    ariaLabels: ariaLabels,\n    column: column,\n    item: item,\n    onEditEnd: options => {\n      setShowSuccessIcon(false);\n      isFocusMoveNeededRef.current = options.refocusCell;\n      onEditEnd(options.cancelled);\n    },\n    submitEdit: submitEdit !== null && submitEdit !== void 0 ? submitEdit : submitHandlerFallback\n  }) : React.createElement(React.Fragment, null, column.cell(item), showSuccessIcon && showIcon && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: styles['body-cell-success'],\n    \"aria-label\": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column),\n    role: \"img\",\n    onMouseDown: e => {\n      // Prevent the editor's Button blur event to be fired when clicking the success icon.\n      // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n      e.preventDefault();\n    }\n  }, React.createElement(Icon, {\n    name: \"status-positive\",\n    variant: \"success\"\n  })), React.createElement(InternalLiveRegion, {\n    tagName: \"span\",\n    hidden: true\n  }, i18n('ariaLabels.successfulEditLabel', (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column)))), React.createElement(\"div\", {\n    className: styles['body-cell-editor-wrapper']\n  }, React.createElement(\"button\", {\n    className: styles['body-cell-editor'],\n    \"aria-label\": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column, item),\n    ref: editActivateRef,\n    onFocus: () => setHasFocus(true),\n    onBlur: () => setHasFocus(false),\n    tabIndex: editActivateTabIndex\n  }, showIcon && React.createElement(Icon, {\n    name: \"edit\"\n  })))));\n}\nexport function TableBodyCell(props) {\n  var _a, _b;\n  const isExpandableColumnCell = props.level !== undefined;\n  const editDisabledReason = (_b = (_a = props.column.editConfig) === null || _a === void 0 ? void 0 : _a.disabledReason) === null || _b === void 0 ? void 0 : _b.call(_a, props.item);\n  // Inline editing is deactivated for expandable column because editable cells are interactive\n  // and cannot include interactive content such as expand toggles.\n  if (editDisabledReason && !isExpandableColumnCell) {\n    return React.createElement(DisabledInlineEditor, Object.assign({\n      editDisabledReason: editDisabledReason\n    }, props));\n  }\n  if ((props.isEditable || props.isEditing) && !isExpandableColumnCell) {\n    return React.createElement(TableCellEditable, Object.assign({}, props));\n  }\n  const {\n    column,\n    item\n  } = props;\n  return React.createElement(TableTdElement, Object.assign({}, props, {\n    isEditable: false\n  }), column.cell(item));\n}","map":{"version":3,"names":["React","useEffect","useRef","useState","useInternalI18n","Icon","useSingleTabStopNavigation","usePrevious","InternalLiveRegion","DisabledInlineEditor","InlineEditor","TableTdElement","styles","submitHandlerFallback","Error","TableCellEditable","_a","item","column","isEditing","onEditStart","onEditEnd","submitEdit","ariaLabels","successfulEdit","rest","__rest","i18n","editActivateRef","tdNativeAttributes","toString","isFocusMoveNeededRef","current","focus","hasHover","setHasHover","hasFocus","setHasFocus","showIcon","prevSuccessfulEdit","prevHasFocus","showSuccessIcon","setShowSuccessIcon","tabIndex","editActivateTabIndex","createElement","Object","assign","nativeAttributes","hasSuccessIcon","onClick","undefined","onMouseEnter","onMouseLeave","options","refocusCell","cancelled","Fragment","cell","className","_b","successfulEditLabel","call","role","onMouseDown","e","preventDefault","name","variant","tagName","hidden","_c","_d","activateEditLabel","ref","onFocus","onBlur","TableBodyCell","props","isExpandableColumnCell","level","editDisabledReason","editConfig","disabledReason","isEditable"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\table\\body-cell\\index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useInternalI18n } from '../../i18n/context';\nimport Icon from '../../icon/internal';\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context.js';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport InternalLiveRegion from '../../live-region/internal';\nimport { TableProps } from '../interfaces';\nimport { DisabledInlineEditor } from './disabled-inline-editor';\nimport { InlineEditor } from './inline-editor';\nimport { TableTdElement, TableTdElementProps } from './td-element';\n\nimport styles from './styles.css.js';\n\nconst submitHandlerFallback = () => {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\n\nexport interface TableBodyCellProps<ItemType> extends TableTdElementProps {\n  column: TableProps.ColumnDefinition<ItemType>;\n  item: ItemType;\n  successfulEdit?: boolean;\n  onEditStart: () => void;\n  onEditEnd: (cancelled: boolean) => void;\n  submitEdit?: TableProps.SubmitEditFunction<ItemType>;\n  ariaLabels: TableProps['ariaLabels'];\n}\n\nfunction TableCellEditable<ItemType>({\n  item,\n  column,\n  isEditing,\n  onEditStart,\n  onEditEnd,\n  submitEdit,\n  ariaLabels,\n  successfulEdit = false,\n  ...rest\n}: TableBodyCellProps<ItemType>) {\n  const i18n = useInternalI18n('table');\n  const editActivateRef = useRef<HTMLButtonElement>(null);\n  const tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString(),\n  };\n  const isFocusMoveNeededRef = useRef(false);\n\n  useEffect(() => {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  const [hasHover, setHasHover] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  // When a cell is both expandable and editable the icon is always shown.\n  const showIcon = hasHover || hasFocus;\n\n  const prevSuccessfulEdit = usePrevious(successfulEdit);\n  const prevHasFocus = usePrevious(hasFocus);\n  const [showSuccessIcon, setShowSuccessIcon] = useState(false);\n\n  useEffect(() => {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n\n  const { tabIndex: editActivateTabIndex } = useSingleTabStopNavigation(editActivateRef);\n\n  return (\n    <TableTdElement\n      {...rest}\n      nativeAttributes={tdNativeAttributes as TableTdElementProps['nativeAttributes']}\n      isEditing={isEditing}\n      hasSuccessIcon={showSuccessIcon && showIcon}\n      onClick={!isEditing ? onEditStart : undefined}\n      onMouseEnter={() => setHasHover(true)}\n      onMouseLeave={() => setHasHover(false)}\n    >\n      {isEditing ? (\n        <InlineEditor\n          ariaLabels={ariaLabels}\n          column={column}\n          item={item}\n          onEditEnd={options => {\n            setShowSuccessIcon(false);\n            isFocusMoveNeededRef.current = options.refocusCell;\n            onEditEnd(options.cancelled);\n          }}\n          submitEdit={submitEdit ?? submitHandlerFallback}\n        />\n      ) : (\n        <>\n          {column.cell(item)}\n\n          {showSuccessIcon && showIcon && (\n            <>\n              <span\n                className={styles['body-cell-success']}\n                aria-label={ariaLabels?.successfulEditLabel?.(column)}\n                role=\"img\"\n                onMouseDown={e => {\n                  // Prevent the editor's Button blur event to be fired when clicking the success icon.\n                  // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n                  e.preventDefault();\n                }}\n              >\n                <Icon name=\"status-positive\" variant=\"success\" />\n              </span>\n              <InternalLiveRegion tagName=\"span\" hidden={true}>\n                {i18n('ariaLabels.successfulEditLabel', ariaLabels?.successfulEditLabel?.(column))}\n              </InternalLiveRegion>\n            </>\n          )}\n\n          <div className={styles['body-cell-editor-wrapper']}>\n            <button\n              className={styles['body-cell-editor']}\n              aria-label={ariaLabels?.activateEditLabel?.(column, item)}\n              ref={editActivateRef}\n              onFocus={() => setHasFocus(true)}\n              onBlur={() => setHasFocus(false)}\n              tabIndex={editActivateTabIndex}\n            >\n              {showIcon && <Icon name=\"edit\" />}\n            </button>\n          </div>\n        </>\n      )}\n    </TableTdElement>\n  );\n}\n\nexport function TableBodyCell<ItemType>(props: TableBodyCellProps<ItemType>) {\n  const isExpandableColumnCell = props.level !== undefined;\n  const editDisabledReason = props.column.editConfig?.disabledReason?.(props.item);\n\n  // Inline editing is deactivated for expandable column because editable cells are interactive\n  // and cannot include interactive content such as expand toggles.\n  if (editDisabledReason && !isExpandableColumnCell) {\n    return <DisabledInlineEditor editDisabledReason={editDisabledReason} {...props} />;\n  }\n  if ((props.isEditable || props.isEditing) && !isExpandableColumnCell) {\n    return <TableCellEditable {...props} />;\n  }\n\n  const { column, item } = props;\n  return (\n    <TableTdElement {...props} isEditable={false}>\n      {column.cell(item)}\n    </TableTdElement>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}