{"ast":null,"code":"var _SharedReactContexts_registeredContexts;\nimport { __classPrivateFieldGet } from \"tslib\";\nexport class SharedReactContexts {\n  constructor() {\n    _SharedReactContexts_registeredContexts.set(this, new WeakMap());\n    this.createContext = (ReactInstance, contextName) => {\n      let contexts = __classPrivateFieldGet(this, _SharedReactContexts_registeredContexts, \"f\").get(ReactInstance);\n      if (!contexts) {\n        contexts = new Map();\n        __classPrivateFieldGet(this, _SharedReactContexts_registeredContexts, \"f\").set(ReactInstance, contexts);\n      }\n      let cachedContext = contexts.get(contextName);\n      if (!cachedContext) {\n        cachedContext = ReactInstance.createContext(undefined);\n        contexts.set(contextName, cachedContext);\n      }\n      return cachedContext;\n    };\n  }\n  installInternal(internalApi = {}) {\n    var _a;\n    (_a = internalApi.createContext) !== null && _a !== void 0 ? _a : internalApi.createContext = this.createContext;\n    return internalApi;\n  }\n}\n_SharedReactContexts_registeredContexts = new WeakMap();","map":{"version":3,"names":["SharedReactContexts","constructor","_SharedReactContexts_registeredContexts","set","WeakMap","createContext","ReactInstance","contextName","contexts","__classPrivateFieldGet","get","Map","cachedContext","undefined","installInternal","internalApi","_a"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\internal\\plugins\\controllers\\shared-react-contexts.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nexport interface SharedReactContextsApiInternal {\n  createContext: <T>(ReactInstance: typeof React, contextName: string) => React.Context<T | undefined>;\n}\n\nexport class SharedReactContexts {\n  #registeredContexts = new WeakMap<typeof React, Map<string, React.Context<any>>>();\n\n  createContext = <T>(ReactInstance: typeof React, contextName: string) => {\n    let contexts = this.#registeredContexts.get(ReactInstance);\n    if (!contexts) {\n      contexts = new Map();\n      this.#registeredContexts.set(ReactInstance, contexts);\n    }\n\n    let cachedContext = contexts.get(contextName);\n\n    if (!cachedContext) {\n      cachedContext = ReactInstance.createContext<T>(undefined as T);\n      contexts.set(contextName, cachedContext);\n    }\n\n    return cachedContext;\n  };\n\n  installInternal(internalApi: Partial<SharedReactContextsApiInternal> = {}): SharedReactContextsApiInternal {\n    internalApi.createContext ??= this.createContext;\n    return internalApi as SharedReactContextsApiInternal;\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,mBAAmB;EAAhCC,YAAA;IACEC,uCAAA,CAAAC,GAAA,OAAsB,IAAIC,OAAO,EAAiD;IAElF,KAAAC,aAAa,GAAG,CAAIC,aAA2B,EAAEC,WAAmB,KAAI;MACtE,IAAIC,QAAQ,GAAGC,sBAAA,KAAI,EAAAP,uCAAA,MAAoB,CAACQ,GAAG,CAACJ,aAAa,CAAC;MAC1D,IAAI,CAACE,QAAQ,EAAE;QACbA,QAAQ,GAAG,IAAIG,GAAG,EAAE;QACpBF,sBAAA,KAAI,EAAAP,uCAAA,MAAoB,CAACC,GAAG,CAACG,aAAa,EAAEE,QAAQ,CAAC;;MAGvD,IAAII,aAAa,GAAGJ,QAAQ,CAACE,GAAG,CAACH,WAAW,CAAC;MAE7C,IAAI,CAACK,aAAa,EAAE;QAClBA,aAAa,GAAGN,aAAa,CAACD,aAAa,CAAIQ,SAAc,CAAC;QAC9DL,QAAQ,CAACL,GAAG,CAACI,WAAW,EAAEK,aAAa,CAAC;;MAG1C,OAAOA,aAAa;IACtB,CAAC;EAMH;EAJEE,eAAeA,CAACC,WAAA,GAAuD,EAAE;;IACvE,CAAAC,EAAA,GAAAD,WAAW,CAACV,aAAa,cAAAW,EAAA,cAAAA,EAAA,GAAzBD,WAAW,CAACV,aAAa,GAAK,IAAI,CAACA,aAAa;IAChD,OAAOU,WAA6C;EACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}