{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport debounce from '../../debounce';\nconst updatableProperties = ['badge', 'resizable', 'defaultSize', 'orderPriority', 'defaultActive', 'onResize'];\nexport class DrawersController {\n  constructor() {\n    this.drawers = [];\n    this.drawersRegistrationListener = null;\n    this.drawerOpenedListener = null;\n    this.drawerClosedListener = null;\n    this.scheduleUpdate = debounce(() => {\n      var _a;\n      (_a = this.drawersRegistrationListener) === null || _a === void 0 ? void 0 : _a.call(this, this.drawers);\n    }, 0);\n    this.registerDrawer = config => {\n      this.drawers = this.drawers.concat(config);\n      this.scheduleUpdate();\n    };\n    this.updateDrawer = _a => {\n      var _b;\n      var {\n          id: drawerId\n        } = _a,\n        rest = __rest(_a, [\"id\"]);\n      const drawerIndex = this.drawers.findIndex(({\n        id\n      }) => id === drawerId);\n      const oldDrawerConfig = (_b = this.drawers) === null || _b === void 0 ? void 0 : _b[drawerIndex];\n      if (!oldDrawerConfig) {\n        throw new Error(`[AwsUi] [runtime drawers] drawer with id ${drawerId} not found`);\n      }\n      const drawers = this.drawers.slice();\n      const updatedDrawer = Object.assign({}, oldDrawerConfig);\n      for (const key of updatableProperties) {\n        if (key in rest) {\n          updatedDrawer[key] = rest[key];\n        }\n      }\n      drawers[drawerIndex] = updatedDrawer;\n      this.drawers = drawers;\n      this.scheduleUpdate();\n    };\n    this.onDrawersRegistered = listener => {\n      if (this.drawersRegistrationListener !== null) {\n        console.warn('[AwsUi] [runtime drawers] multiple app layout instances detected');\n      }\n      this.drawersRegistrationListener = listener;\n      this.scheduleUpdate();\n      return () => {\n        this.drawersRegistrationListener = null;\n      };\n    };\n    this.clearRegisteredDrawers = () => {\n      this.drawers = [];\n    };\n    this.onDrawerOpened = listener => {\n      if (this.drawerOpenedListener !== null) {\n        console.warn('[AwsUi] [runtime drawers] multiple app layout instances detected');\n      }\n      this.drawerOpenedListener = listener;\n      return () => {\n        this.drawerOpenedListener = null;\n      };\n    };\n    this.onDrawerClosed = listener => {\n      if (this.drawerClosedListener !== null) {\n        console.warn('[AwsUi] [runtime drawers] multiple app layout instances detected');\n      }\n      this.drawerClosedListener = listener;\n      return () => {\n        this.drawerClosedListener = null;\n      };\n    };\n    this.openDrawer = (drawerId, params) => {\n      var _a;\n      (_a = this.drawerOpenedListener) === null || _a === void 0 ? void 0 : _a.call(this, drawerId, params);\n    };\n    this.closeDrawer = (drawerId, params) => {\n      var _a;\n      (_a = this.drawerClosedListener) === null || _a === void 0 ? void 0 : _a.call(this, drawerId, params);\n    };\n  }\n  installPublic(api = {}) {\n    var _a, _b, _c, _d;\n    (_a = api.registerDrawer) !== null && _a !== void 0 ? _a : api.registerDrawer = this.registerDrawer;\n    (_b = api.updateDrawer) !== null && _b !== void 0 ? _b : api.updateDrawer = this.updateDrawer;\n    (_c = api.openDrawer) !== null && _c !== void 0 ? _c : api.openDrawer = this.openDrawer;\n    (_d = api.closeDrawer) !== null && _d !== void 0 ? _d : api.closeDrawer = this.closeDrawer;\n    return api;\n  }\n  installInternal(internalApi = {}) {\n    var _a, _b, _c, _d;\n    (_a = internalApi.clearRegisteredDrawers) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredDrawers = this.clearRegisteredDrawers;\n    (_b = internalApi.onDrawersRegistered) !== null && _b !== void 0 ? _b : internalApi.onDrawersRegistered = this.onDrawersRegistered;\n    (_c = internalApi.onDrawerOpened) !== null && _c !== void 0 ? _c : internalApi.onDrawerOpened = this.onDrawerOpened;\n    (_d = internalApi.onDrawerClosed) !== null && _d !== void 0 ? _d : internalApi.onDrawerClosed = this.onDrawerClosed;\n    return internalApi;\n  }\n}","map":{"version":3,"names":["debounce","updatableProperties","DrawersController","constructor","drawers","drawersRegistrationListener","drawerOpenedListener","drawerClosedListener","scheduleUpdate","_a","call","registerDrawer","config","concat","updateDrawer","id","drawerId","rest","__rest","drawerIndex","findIndex","oldDrawerConfig","_b","Error","slice","updatedDrawer","Object","assign","key","onDrawersRegistered","listener","console","warn","clearRegisteredDrawers","onDrawerOpened","onDrawerClosed","openDrawer","params","closeDrawer","installPublic","api","_c","_d","installInternal","internalApi"],"sources":["C:\\Users\\nicky\\Documents\\GitHub\\cse167\\final_project\\node_modules\\src\\internal\\plugins\\controllers\\drawers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport debounce from '../../debounce';\nimport { NonCancelableEventHandler } from '../../events';\n\nexport type DrawerVisibilityChange = (callback: (isVisible: boolean) => void) => void;\n\nexport interface MountContentContext {\n  onVisibilityChange: DrawerVisibilityChange;\n}\n\nexport interface DrawerStateChangeParams {\n  isOpen: boolean;\n  initiatedByUserAction?: boolean;\n}\n\nexport interface DrawerConfig {\n  id: string;\n  type?: 'local' | 'global';\n  ariaLabels: {\n    content?: string;\n    closeButton?: string;\n    triggerButton?: string;\n    resizeHandle?: string;\n  };\n  badge?: boolean;\n  resizable?: boolean;\n  defaultSize?: number;\n  onResize?: NonCancelableEventHandler<{ size: number; id: string }>;\n  orderPriority?: number;\n  defaultActive?: boolean;\n  trigger?: {\n    iconSvg: string;\n  };\n  mountContent: (container: HTMLElement, mountContext: MountContentContext) => void;\n  unmountContent: (container: HTMLElement) => void;\n  preserveInactiveContent?: boolean;\n  onToggle?: NonCancelableEventHandler<DrawerStateChangeParams>;\n}\n\nconst updatableProperties = [\n  'badge',\n  'resizable',\n  'defaultSize',\n  'orderPriority',\n  'defaultActive',\n  'onResize',\n] as const;\n\nexport type UpdateDrawerConfig = { id: DrawerConfig['id'] } & Partial<\n  Pick<DrawerConfig, (typeof updatableProperties)[number]>\n>;\n\nexport type DrawersRegistrationListener = (drawers: Array<DrawerConfig>) => void;\n\nexport type DrawersToggledListener = (drawerId: string, params?: OpenCloseDrawerParams) => void;\n\nexport interface OpenCloseDrawerParams {\n  initiatedByUserAction: boolean;\n}\n\nexport interface DrawersApiPublic {\n  registerDrawer(config: DrawerConfig): void;\n  updateDrawer(config: UpdateDrawerConfig): void;\n  openDrawer(drawerId: string, params?: OpenCloseDrawerParams): void;\n  closeDrawer(drawerId: string, params?: OpenCloseDrawerParams): void;\n}\n\nexport interface DrawersApiInternal {\n  clearRegisteredDrawers(): void;\n  onDrawersRegistered(listener: DrawersRegistrationListener): () => void;\n  onDrawerOpened(listener: DrawersToggledListener): () => void;\n  onDrawerClosed(listener: DrawersToggledListener): () => void;\n}\n\nexport class DrawersController {\n  private drawers: Array<DrawerConfig> = [];\n  private drawersRegistrationListener: DrawersRegistrationListener | null = null;\n  private drawerOpenedListener: DrawersToggledListener | null = null;\n  private drawerClosedListener: DrawersToggledListener | null = null;\n\n  scheduleUpdate = debounce(() => {\n    this.drawersRegistrationListener?.(this.drawers);\n  }, 0);\n\n  registerDrawer = (config: DrawerConfig) => {\n    this.drawers = this.drawers.concat(config);\n    this.scheduleUpdate();\n  };\n\n  updateDrawer = ({ id: drawerId, ...rest }: UpdateDrawerConfig) => {\n    const drawerIndex = this.drawers.findIndex(({ id }) => id === drawerId);\n    const oldDrawerConfig = this.drawers?.[drawerIndex];\n    if (!oldDrawerConfig) {\n      throw new Error(`[AwsUi] [runtime drawers] drawer with id ${drawerId} not found`);\n    }\n    const drawers = this.drawers.slice();\n    const updatedDrawer = { ...oldDrawerConfig };\n    for (const key of updatableProperties) {\n      if (key in rest) {\n        updatedDrawer[key] = (rest as any)[key];\n      }\n    }\n    drawers[drawerIndex] = updatedDrawer;\n    this.drawers = drawers;\n    this.scheduleUpdate();\n  };\n\n  onDrawersRegistered = (listener: DrawersRegistrationListener) => {\n    if (this.drawersRegistrationListener !== null) {\n      console.warn('[AwsUi] [runtime drawers] multiple app layout instances detected');\n    }\n    this.drawersRegistrationListener = listener;\n    this.scheduleUpdate();\n    return () => {\n      this.drawersRegistrationListener = null;\n    };\n  };\n\n  clearRegisteredDrawers = () => {\n    this.drawers = [];\n  };\n\n  onDrawerOpened = (listener: DrawersToggledListener) => {\n    if (this.drawerOpenedListener !== null) {\n      console.warn('[AwsUi] [runtime drawers] multiple app layout instances detected');\n    }\n\n    this.drawerOpenedListener = listener;\n\n    return () => {\n      this.drawerOpenedListener = null;\n    };\n  };\n\n  onDrawerClosed = (listener: DrawersToggledListener) => {\n    if (this.drawerClosedListener !== null) {\n      console.warn('[AwsUi] [runtime drawers] multiple app layout instances detected');\n    }\n\n    this.drawerClosedListener = listener;\n\n    return () => {\n      this.drawerClosedListener = null;\n    };\n  };\n\n  openDrawer = (drawerId: string, params?: OpenCloseDrawerParams) => {\n    this.drawerOpenedListener?.(drawerId, params);\n  };\n\n  closeDrawer = (drawerId: string, params?: OpenCloseDrawerParams) => {\n    this.drawerClosedListener?.(drawerId, params);\n  };\n\n  installPublic(api: Partial<DrawersApiPublic> = {}): DrawersApiPublic {\n    api.registerDrawer ??= this.registerDrawer;\n    api.updateDrawer ??= this.updateDrawer;\n    api.openDrawer ??= this.openDrawer;\n    api.closeDrawer ??= this.closeDrawer;\n    return api as DrawersApiPublic;\n  }\n\n  installInternal(internalApi: Partial<DrawersApiInternal> = {}): DrawersApiInternal {\n    internalApi.clearRegisteredDrawers ??= this.clearRegisteredDrawers;\n    internalApi.onDrawersRegistered ??= this.onDrawersRegistered;\n    internalApi.onDrawerOpened ??= this.onDrawerOpened;\n    internalApi.onDrawerClosed ??= this.onDrawerClosed;\n    return internalApi as DrawersApiInternal;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}